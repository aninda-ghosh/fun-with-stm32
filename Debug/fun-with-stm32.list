
fun-with-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d00  08005d00  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d08  08005d08  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000028  08005d38  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08005d38  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ad0  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000195a  00000000  00000000  00029b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  0002b480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015092  00000000  00000000  0002c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d38  00000000  00000000  000416aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080fa3  00000000  00000000  000493e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002618  00000000  00000000  000ca400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000028 	.word	0x20000028
 8000158:	00000000 	.word	0x00000000
 800015c:	08005cc4 	.word	0x08005cc4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000002c 	.word	0x2000002c
 8000178:	08005cc4 	.word	0x08005cc4

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2f>:
 8000918:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800091c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000920:	bf24      	itt	cs
 8000922:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000926:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092a:	d90d      	bls.n	8000948 <__aeabi_d2f+0x30>
 800092c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000930:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000934:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000938:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800093c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000940:	bf08      	it	eq
 8000942:	f020 0001 	biceq.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800094c:	d121      	bne.n	8000992 <__aeabi_d2f+0x7a>
 800094e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000952:	bfbc      	itt	lt
 8000954:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000958:	4770      	bxlt	lr
 800095a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000962:	f1c2 0218 	rsb	r2, r2, #24
 8000966:	f1c2 0c20 	rsb	ip, r2, #32
 800096a:	fa10 f30c 	lsls.w	r3, r0, ip
 800096e:	fa20 f002 	lsr.w	r0, r0, r2
 8000972:	bf18      	it	ne
 8000974:	f040 0001 	orrne.w	r0, r0, #1
 8000978:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000980:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000984:	ea40 000c 	orr.w	r0, r0, ip
 8000988:	fa23 f302 	lsr.w	r3, r3, r2
 800098c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000990:	e7cc      	b.n	800092c <__aeabi_d2f+0x14>
 8000992:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000996:	d107      	bne.n	80009a8 <__aeabi_d2f+0x90>
 8000998:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800099c:	bf1e      	ittt	ne
 800099e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009a6:	4770      	bxne	lr
 80009a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_frsub>:
 80009b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009bc:	e002      	b.n	80009c4 <__addsf3>
 80009be:	bf00      	nop

080009c0 <__aeabi_fsub>:
 80009c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c4 <__addsf3>:
 80009c4:	0042      	lsls	r2, r0, #1
 80009c6:	bf1f      	itttt	ne
 80009c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009cc:	ea92 0f03 	teqne	r2, r3
 80009d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d8:	d06a      	beq.n	8000ab0 <__addsf3+0xec>
 80009da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009e2:	bfc1      	itttt	gt
 80009e4:	18d2      	addgt	r2, r2, r3
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	4048      	eorgt	r0, r1
 80009ea:	4041      	eorgt	r1, r0
 80009ec:	bfb8      	it	lt
 80009ee:	425b      	neglt	r3, r3
 80009f0:	2b19      	cmp	r3, #25
 80009f2:	bf88      	it	hi
 80009f4:	4770      	bxhi	lr
 80009f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a02:	bf18      	it	ne
 8000a04:	4240      	negne	r0, r0
 8000a06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a12:	bf18      	it	ne
 8000a14:	4249      	negne	r1, r1
 8000a16:	ea92 0f03 	teq	r2, r3
 8000a1a:	d03f      	beq.n	8000a9c <__addsf3+0xd8>
 8000a1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a20:	fa41 fc03 	asr.w	ip, r1, r3
 8000a24:	eb10 000c 	adds.w	r0, r0, ip
 8000a28:	f1c3 0320 	rsb	r3, r3, #32
 8000a2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a34:	d502      	bpl.n	8000a3c <__addsf3+0x78>
 8000a36:	4249      	negs	r1, r1
 8000a38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a40:	d313      	bcc.n	8000a6a <__addsf3+0xa6>
 8000a42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a46:	d306      	bcc.n	8000a56 <__addsf3+0x92>
 8000a48:	0840      	lsrs	r0, r0, #1
 8000a4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4e:	f102 0201 	add.w	r2, r2, #1
 8000a52:	2afe      	cmp	r2, #254	; 0xfe
 8000a54:	d251      	bcs.n	8000afa <__addsf3+0x136>
 8000a56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5e:	bf08      	it	eq
 8000a60:	f020 0001 	biceq.w	r0, r0, #1
 8000a64:	ea40 0003 	orr.w	r0, r0, r3
 8000a68:	4770      	bx	lr
 8000a6a:	0049      	lsls	r1, r1, #1
 8000a6c:	eb40 0000 	adc.w	r0, r0, r0
 8000a70:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a74:	f1a2 0201 	sub.w	r2, r2, #1
 8000a78:	d1ed      	bne.n	8000a56 <__addsf3+0x92>
 8000a7a:	fab0 fc80 	clz	ip, r0
 8000a7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a82:	ebb2 020c 	subs.w	r2, r2, ip
 8000a86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a8a:	bfaa      	itet	ge
 8000a8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a90:	4252      	neglt	r2, r2
 8000a92:	4318      	orrge	r0, r3
 8000a94:	bfbc      	itt	lt
 8000a96:	40d0      	lsrlt	r0, r2
 8000a98:	4318      	orrlt	r0, r3
 8000a9a:	4770      	bx	lr
 8000a9c:	f092 0f00 	teq	r2, #0
 8000aa0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa4:	bf06      	itte	eq
 8000aa6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aaa:	3201      	addeq	r2, #1
 8000aac:	3b01      	subne	r3, #1
 8000aae:	e7b5      	b.n	8000a1c <__addsf3+0x58>
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d021      	beq.n	8000b04 <__addsf3+0x140>
 8000ac0:	ea92 0f03 	teq	r2, r3
 8000ac4:	d004      	beq.n	8000ad0 <__addsf3+0x10c>
 8000ac6:	f092 0f00 	teq	r2, #0
 8000aca:	bf08      	it	eq
 8000acc:	4608      	moveq	r0, r1
 8000ace:	4770      	bx	lr
 8000ad0:	ea90 0f01 	teq	r0, r1
 8000ad4:	bf1c      	itt	ne
 8000ad6:	2000      	movne	r0, #0
 8000ad8:	4770      	bxne	lr
 8000ada:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ade:	d104      	bne.n	8000aea <__addsf3+0x126>
 8000ae0:	0040      	lsls	r0, r0, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae8:	4770      	bx	lr
 8000aea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aee:	bf3c      	itt	cc
 8000af0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af4:	4770      	bxcc	lr
 8000af6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	4770      	bx	lr
 8000b04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b08:	bf16      	itet	ne
 8000b0a:	4608      	movne	r0, r1
 8000b0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b10:	4601      	movne	r1, r0
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	bf06      	itte	eq
 8000b16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b1a:	ea90 0f01 	teqeq	r0, r1
 8000b1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_ui2f>:
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e004      	b.n	8000b34 <__aeabi_i2f+0x8>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_i2f>:
 8000b2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b30:	bf48      	it	mi
 8000b32:	4240      	negmi	r0, r0
 8000b34:	ea5f 0c00 	movs.w	ip, r0
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b40:	4601      	mov	r1, r0
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	e01c      	b.n	8000b82 <__aeabi_l2f+0x2a>

08000b48 <__aeabi_ul2f>:
 8000b48:	ea50 0201 	orrs.w	r2, r0, r1
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	e00a      	b.n	8000b6c <__aeabi_l2f+0x14>
 8000b56:	bf00      	nop

08000b58 <__aeabi_l2f>:
 8000b58:	ea50 0201 	orrs.w	r2, r0, r1
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__aeabi_l2f+0x14>
 8000b66:	4240      	negs	r0, r0
 8000b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6c:	ea5f 0c01 	movs.w	ip, r1
 8000b70:	bf02      	ittt	eq
 8000b72:	4684      	moveq	ip, r0
 8000b74:	4601      	moveq	r1, r0
 8000b76:	2000      	moveq	r0, #0
 8000b78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b86:	fabc f28c 	clz	r2, ip
 8000b8a:	3a08      	subs	r2, #8
 8000b8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b90:	db10      	blt.n	8000bb4 <__aeabi_l2f+0x5c>
 8000b92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b96:	4463      	add	r3, ip
 8000b98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ba0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba8:	eb43 0002 	adc.w	r0, r3, r2
 8000bac:	bf08      	it	eq
 8000bae:	f020 0001 	biceq.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	f102 0220 	add.w	r2, r2, #32
 8000bb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_fmul>:
 8000bd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bdc:	bf1e      	ittt	ne
 8000bde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000be2:	ea92 0f0c 	teqne	r2, ip
 8000be6:	ea93 0f0c 	teqne	r3, ip
 8000bea:	d06f      	beq.n	8000ccc <__aeabi_fmul+0xf8>
 8000bec:	441a      	add	r2, r3
 8000bee:	ea80 0c01 	eor.w	ip, r0, r1
 8000bf2:	0240      	lsls	r0, r0, #9
 8000bf4:	bf18      	it	ne
 8000bf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bfa:	d01e      	beq.n	8000c3a <__aeabi_fmul+0x66>
 8000bfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c08:	fba0 3101 	umull	r3, r1, r0, r1
 8000c0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c14:	bf3e      	ittt	cc
 8000c16:	0049      	lslcc	r1, r1, #1
 8000c18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c1c:	005b      	lslcc	r3, r3, #1
 8000c1e:	ea40 0001 	orr.w	r0, r0, r1
 8000c22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c26:	2afd      	cmp	r2, #253	; 0xfd
 8000c28:	d81d      	bhi.n	8000c66 <__aeabi_fmul+0x92>
 8000c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c32:	bf08      	it	eq
 8000c34:	f020 0001 	biceq.w	r0, r0, #1
 8000c38:	4770      	bx	lr
 8000c3a:	f090 0f00 	teq	r0, #0
 8000c3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c42:	bf08      	it	eq
 8000c44:	0249      	lsleq	r1, r1, #9
 8000c46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c4e:	3a7f      	subs	r2, #127	; 0x7f
 8000c50:	bfc2      	ittt	gt
 8000c52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c5a:	4770      	bxgt	lr
 8000c5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	dc5d      	bgt.n	8000d24 <__aeabi_fmul+0x150>
 8000c68:	f112 0f19 	cmn.w	r2, #25
 8000c6c:	bfdc      	itt	le
 8000c6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c72:	4770      	bxle	lr
 8000c74:	f1c2 0200 	rsb	r2, r2, #0
 8000c78:	0041      	lsls	r1, r0, #1
 8000c7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c7e:	f1c2 0220 	rsb	r2, r2, #32
 8000c82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c8a:	f140 0000 	adc.w	r0, r0, #0
 8000c8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c92:	bf08      	it	eq
 8000c94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c98:	4770      	bx	lr
 8000c9a:	f092 0f00 	teq	r2, #0
 8000c9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ca2:	bf02      	ittt	eq
 8000ca4:	0040      	lsleq	r0, r0, #1
 8000ca6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000caa:	3a01      	subeq	r2, #1
 8000cac:	d0f9      	beq.n	8000ca2 <__aeabi_fmul+0xce>
 8000cae:	ea40 000c 	orr.w	r0, r0, ip
 8000cb2:	f093 0f00 	teq	r3, #0
 8000cb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	bf02      	ittt	eq
 8000cbc:	0049      	lsleq	r1, r1, #1
 8000cbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cc2:	3b01      	subeq	r3, #1
 8000cc4:	d0f9      	beq.n	8000cba <__aeabi_fmul+0xe6>
 8000cc6:	ea41 010c 	orr.w	r1, r1, ip
 8000cca:	e78f      	b.n	8000bec <__aeabi_fmul+0x18>
 8000ccc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cd0:	ea92 0f0c 	teq	r2, ip
 8000cd4:	bf18      	it	ne
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d00a      	beq.n	8000cf2 <__aeabi_fmul+0x11e>
 8000cdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ce0:	bf18      	it	ne
 8000ce2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ce6:	d1d8      	bne.n	8000c9a <__aeabi_fmul+0xc6>
 8000ce8:	ea80 0001 	eor.w	r0, r0, r1
 8000cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf0:	4770      	bx	lr
 8000cf2:	f090 0f00 	teq	r0, #0
 8000cf6:	bf17      	itett	ne
 8000cf8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	f091 0f00 	teqne	r1, #0
 8000d02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d06:	d014      	beq.n	8000d32 <__aeabi_fmul+0x15e>
 8000d08:	ea92 0f0c 	teq	r2, ip
 8000d0c:	d101      	bne.n	8000d12 <__aeabi_fmul+0x13e>
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	d10f      	bne.n	8000d32 <__aeabi_fmul+0x15e>
 8000d12:	ea93 0f0c 	teq	r3, ip
 8000d16:	d103      	bne.n	8000d20 <__aeabi_fmul+0x14c>
 8000d18:	024b      	lsls	r3, r1, #9
 8000d1a:	bf18      	it	ne
 8000d1c:	4608      	movne	r0, r1
 8000d1e:	d108      	bne.n	8000d32 <__aeabi_fmul+0x15e>
 8000d20:	ea80 0001 	eor.w	r0, r0, r1
 8000d24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bx	lr
 8000d32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fdiv>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d069      	beq.n	8000e28 <__aeabi_fdiv+0xec>
 8000d54:	eba2 0203 	sub.w	r2, r2, r3
 8000d58:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5c:	0249      	lsls	r1, r1, #9
 8000d5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d62:	d037      	beq.n	8000dd4 <__aeabi_fdiv+0x98>
 8000d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d74:	428b      	cmp	r3, r1
 8000d76:	bf38      	it	cc
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d82:	428b      	cmp	r3, r1
 8000d84:	bf24      	itt	cs
 8000d86:	1a5b      	subcs	r3, r3, r1
 8000d88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d9e:	bf24      	itt	cs
 8000da0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dac:	bf24      	itt	cs
 8000dae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000db2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dbe:	d1e0      	bne.n	8000d82 <__aeabi_fdiv+0x46>
 8000dc0:	2afd      	cmp	r2, #253	; 0xfd
 8000dc2:	f63f af50 	bhi.w	8000c66 <__aeabi_fmul+0x92>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ddc:	327f      	adds	r2, #127	; 0x7f
 8000dde:	bfc2      	ittt	gt
 8000de0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de8:	4770      	bxgt	lr
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	3a01      	subs	r2, #1
 8000df4:	e737      	b.n	8000c66 <__aeabi_fmul+0x92>
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fdiv+0xc2>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fdiv+0xda>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e795      	b.n	8000d54 <__aeabi_fdiv+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d108      	bne.n	8000e44 <__aeabi_fdiv+0x108>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	f47f af7d 	bne.w	8000d32 <__aeabi_fmul+0x15e>
 8000e38:	ea93 0f0c 	teq	r3, ip
 8000e3c:	f47f af70 	bne.w	8000d20 <__aeabi_fmul+0x14c>
 8000e40:	4608      	mov	r0, r1
 8000e42:	e776      	b.n	8000d32 <__aeabi_fmul+0x15e>
 8000e44:	ea93 0f0c 	teq	r3, ip
 8000e48:	d104      	bne.n	8000e54 <__aeabi_fdiv+0x118>
 8000e4a:	024b      	lsls	r3, r1, #9
 8000e4c:	f43f af4c 	beq.w	8000ce8 <__aeabi_fmul+0x114>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e76e      	b.n	8000d32 <__aeabi_fmul+0x15e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1ca      	bne.n	8000df6 <__aeabi_fdiv+0xba>
 8000e60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e64:	f47f af5c 	bne.w	8000d20 <__aeabi_fmul+0x14c>
 8000e68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e6c:	f47f af3c 	bne.w	8000ce8 <__aeabi_fmul+0x114>
 8000e70:	e75f      	b.n	8000d32 <__aeabi_fmul+0x15e>
 8000e72:	bf00      	nop

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e88:	f000 b974 	b.w	8001174 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	468c      	mov	ip, r1
 8000eaa:	4604      	mov	r4, r0
 8000eac:	9e08      	ldr	r6, [sp, #32]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d14b      	bne.n	8000f4a <__udivmoddi4+0xa6>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	4615      	mov	r5, r2
 8000eb6:	d967      	bls.n	8000f88 <__udivmoddi4+0xe4>
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b14a      	cbz	r2, 8000ed2 <__udivmoddi4+0x2e>
 8000ebe:	f1c2 0720 	rsb	r7, r2, #32
 8000ec2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec6:	fa20 f707 	lsr.w	r7, r0, r7
 8000eca:	4095      	lsls	r5, r2
 8000ecc:	ea47 0c03 	orr.w	ip, r7, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ed6:	fbbc f7fe 	udiv	r7, ip, lr
 8000eda:	fa1f f885 	uxth.w	r8, r5
 8000ede:	fb0e c317 	mls	r3, lr, r7, ip
 8000ee2:	fb07 f908 	mul.w	r9, r7, r8
 8000ee6:	0c21      	lsrs	r1, r4, #16
 8000ee8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eec:	4599      	cmp	r9, r3
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x60>
 8000ef0:	18eb      	adds	r3, r5, r3
 8000ef2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000ef6:	f080 811c 	bcs.w	8001132 <__udivmoddi4+0x28e>
 8000efa:	4599      	cmp	r9, r3
 8000efc:	f240 8119 	bls.w	8001132 <__udivmoddi4+0x28e>
 8000f00:	3f02      	subs	r7, #2
 8000f02:	442b      	add	r3, r5
 8000f04:	eba3 0309 	sub.w	r3, r3, r9
 8000f08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f10:	fb00 f108 	mul.w	r1, r0, r8
 8000f14:	b2a4      	uxth	r4, r4
 8000f16:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f1a:	42a1      	cmp	r1, r4
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x8e>
 8000f1e:	192c      	adds	r4, r5, r4
 8000f20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f24:	f080 8107 	bcs.w	8001136 <__udivmoddi4+0x292>
 8000f28:	42a1      	cmp	r1, r4
 8000f2a:	f240 8104 	bls.w	8001136 <__udivmoddi4+0x292>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f36:	2700      	movs	r7, #0
 8000f38:	1a64      	subs	r4, r4, r1
 8000f3a:	b11e      	cbz	r6, 8000f44 <__udivmoddi4+0xa0>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	40d4      	lsrs	r4, r2
 8000f40:	e9c6 4300 	strd	r4, r3, [r6]
 8000f44:	4639      	mov	r1, r7
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d909      	bls.n	8000f62 <__udivmoddi4+0xbe>
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	f000 80ec 	beq.w	800112c <__udivmoddi4+0x288>
 8000f54:	2700      	movs	r7, #0
 8000f56:	e9c6 0100 	strd	r0, r1, [r6]
 8000f5a:	4638      	mov	r0, r7
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	fab3 f783 	clz	r7, r3
 8000f66:	2f00      	cmp	r7, #0
 8000f68:	d148      	bne.n	8000ffc <__udivmoddi4+0x158>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d302      	bcc.n	8000f74 <__udivmoddi4+0xd0>
 8000f6e:	4282      	cmp	r2, r0
 8000f70:	f200 80fb 	bhi.w	800116a <__udivmoddi4+0x2c6>
 8000f74:	1a84      	subs	r4, r0, r2
 8000f76:	eb61 0303 	sbc.w	r3, r1, r3
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d0e0      	beq.n	8000f44 <__udivmoddi4+0xa0>
 8000f82:	e9c6 4c00 	strd	r4, ip, [r6]
 8000f86:	e7dd      	b.n	8000f44 <__udivmoddi4+0xa0>
 8000f88:	b902      	cbnz	r2, 8000f8c <__udivmoddi4+0xe8>
 8000f8a:	deff      	udf	#255	; 0xff
 8000f8c:	fab2 f282 	clz	r2, r2
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	f040 808f 	bne.w	80010b4 <__udivmoddi4+0x210>
 8000f96:	2701      	movs	r7, #1
 8000f98:	1b49      	subs	r1, r1, r5
 8000f9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000f9e:	fa1f f985 	uxth.w	r9, r5
 8000fa2:	fbb1 fef8 	udiv	lr, r1, r8
 8000fa6:	fb08 111e 	mls	r1, r8, lr, r1
 8000faa:	fb09 f00e 	mul.w	r0, r9, lr
 8000fae:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000fb2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d907      	bls.n	8000fca <__udivmoddi4+0x126>
 8000fba:	18eb      	adds	r3, r5, r3
 8000fbc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000fc0:	d202      	bcs.n	8000fc8 <__udivmoddi4+0x124>
 8000fc2:	4298      	cmp	r0, r3
 8000fc4:	f200 80cd 	bhi.w	8001162 <__udivmoddi4+0x2be>
 8000fc8:	468e      	mov	lr, r1
 8000fca:	1a1b      	subs	r3, r3, r0
 8000fcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000fd4:	fb09 f900 	mul.w	r9, r9, r0
 8000fd8:	b2a4      	uxth	r4, r4
 8000fda:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fde:	45a1      	cmp	r9, r4
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x14e>
 8000fe2:	192c      	adds	r4, r5, r4
 8000fe4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000fe8:	d202      	bcs.n	8000ff0 <__udivmoddi4+0x14c>
 8000fea:	45a1      	cmp	r9, r4
 8000fec:	f200 80b6 	bhi.w	800115c <__udivmoddi4+0x2b8>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	eba4 0409 	sub.w	r4, r4, r9
 8000ff6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000ffa:	e79e      	b.n	8000f3a <__udivmoddi4+0x96>
 8000ffc:	f1c7 0520 	rsb	r5, r7, #32
 8001000:	40bb      	lsls	r3, r7
 8001002:	fa22 fc05 	lsr.w	ip, r2, r5
 8001006:	ea4c 0c03 	orr.w	ip, ip, r3
 800100a:	fa21 f405 	lsr.w	r4, r1, r5
 800100e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001012:	fbb4 f9fe 	udiv	r9, r4, lr
 8001016:	fa1f f88c 	uxth.w	r8, ip
 800101a:	fb0e 4419 	mls	r4, lr, r9, r4
 800101e:	fa20 f305 	lsr.w	r3, r0, r5
 8001022:	40b9      	lsls	r1, r7
 8001024:	fb09 fa08 	mul.w	sl, r9, r8
 8001028:	4319      	orrs	r1, r3
 800102a:	0c0b      	lsrs	r3, r1, #16
 800102c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001030:	45a2      	cmp	sl, r4
 8001032:	fa02 f207 	lsl.w	r2, r2, r7
 8001036:	fa00 f307 	lsl.w	r3, r0, r7
 800103a:	d90b      	bls.n	8001054 <__udivmoddi4+0x1b0>
 800103c:	eb1c 0404 	adds.w	r4, ip, r4
 8001040:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001044:	f080 8088 	bcs.w	8001158 <__udivmoddi4+0x2b4>
 8001048:	45a2      	cmp	sl, r4
 800104a:	f240 8085 	bls.w	8001158 <__udivmoddi4+0x2b4>
 800104e:	f1a9 0902 	sub.w	r9, r9, #2
 8001052:	4464      	add	r4, ip
 8001054:	eba4 040a 	sub.w	r4, r4, sl
 8001058:	fbb4 f0fe 	udiv	r0, r4, lr
 800105c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001060:	fb00 fa08 	mul.w	sl, r0, r8
 8001064:	b289      	uxth	r1, r1
 8001066:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800106a:	45a2      	cmp	sl, r4
 800106c:	d908      	bls.n	8001080 <__udivmoddi4+0x1dc>
 800106e:	eb1c 0404 	adds.w	r4, ip, r4
 8001072:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001076:	d26b      	bcs.n	8001150 <__udivmoddi4+0x2ac>
 8001078:	45a2      	cmp	sl, r4
 800107a:	d969      	bls.n	8001150 <__udivmoddi4+0x2ac>
 800107c:	3802      	subs	r0, #2
 800107e:	4464      	add	r4, ip
 8001080:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001084:	fba0 8902 	umull	r8, r9, r0, r2
 8001088:	eba4 040a 	sub.w	r4, r4, sl
 800108c:	454c      	cmp	r4, r9
 800108e:	4641      	mov	r1, r8
 8001090:	46ce      	mov	lr, r9
 8001092:	d354      	bcc.n	800113e <__udivmoddi4+0x29a>
 8001094:	d051      	beq.n	800113a <__udivmoddi4+0x296>
 8001096:	2e00      	cmp	r6, #0
 8001098:	d069      	beq.n	800116e <__udivmoddi4+0x2ca>
 800109a:	1a5a      	subs	r2, r3, r1
 800109c:	eb64 040e 	sbc.w	r4, r4, lr
 80010a0:	fa04 f505 	lsl.w	r5, r4, r5
 80010a4:	fa22 f307 	lsr.w	r3, r2, r7
 80010a8:	40fc      	lsrs	r4, r7
 80010aa:	431d      	orrs	r5, r3
 80010ac:	e9c6 5400 	strd	r5, r4, [r6]
 80010b0:	2700      	movs	r7, #0
 80010b2:	e747      	b.n	8000f44 <__udivmoddi4+0xa0>
 80010b4:	4095      	lsls	r5, r2
 80010b6:	f1c2 0320 	rsb	r3, r2, #32
 80010ba:	fa21 f003 	lsr.w	r0, r1, r3
 80010be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010c2:	fbb0 f7f8 	udiv	r7, r0, r8
 80010c6:	fa1f f985 	uxth.w	r9, r5
 80010ca:	fb08 0017 	mls	r0, r8, r7, r0
 80010ce:	fa24 f303 	lsr.w	r3, r4, r3
 80010d2:	4091      	lsls	r1, r2
 80010d4:	fb07 fc09 	mul.w	ip, r7, r9
 80010d8:	430b      	orrs	r3, r1
 80010da:	0c19      	lsrs	r1, r3, #16
 80010dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010e0:	458c      	cmp	ip, r1
 80010e2:	fa04 f402 	lsl.w	r4, r4, r2
 80010e6:	d907      	bls.n	80010f8 <__udivmoddi4+0x254>
 80010e8:	1869      	adds	r1, r5, r1
 80010ea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80010ee:	d231      	bcs.n	8001154 <__udivmoddi4+0x2b0>
 80010f0:	458c      	cmp	ip, r1
 80010f2:	d92f      	bls.n	8001154 <__udivmoddi4+0x2b0>
 80010f4:	3f02      	subs	r7, #2
 80010f6:	4429      	add	r1, r5
 80010f8:	eba1 010c 	sub.w	r1, r1, ip
 80010fc:	fbb1 f0f8 	udiv	r0, r1, r8
 8001100:	fb08 1c10 	mls	ip, r8, r0, r1
 8001104:	fb00 fe09 	mul.w	lr, r0, r9
 8001108:	b299      	uxth	r1, r3
 800110a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800110e:	458e      	cmp	lr, r1
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0x27e>
 8001112:	1869      	adds	r1, r5, r1
 8001114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001118:	d218      	bcs.n	800114c <__udivmoddi4+0x2a8>
 800111a:	458e      	cmp	lr, r1
 800111c:	d916      	bls.n	800114c <__udivmoddi4+0x2a8>
 800111e:	3802      	subs	r0, #2
 8001120:	4429      	add	r1, r5
 8001122:	eba1 010e 	sub.w	r1, r1, lr
 8001126:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800112a:	e73a      	b.n	8000fa2 <__udivmoddi4+0xfe>
 800112c:	4637      	mov	r7, r6
 800112e:	4630      	mov	r0, r6
 8001130:	e708      	b.n	8000f44 <__udivmoddi4+0xa0>
 8001132:	460f      	mov	r7, r1
 8001134:	e6e6      	b.n	8000f04 <__udivmoddi4+0x60>
 8001136:	4618      	mov	r0, r3
 8001138:	e6fb      	b.n	8000f32 <__udivmoddi4+0x8e>
 800113a:	4543      	cmp	r3, r8
 800113c:	d2ab      	bcs.n	8001096 <__udivmoddi4+0x1f2>
 800113e:	ebb8 0102 	subs.w	r1, r8, r2
 8001142:	eb69 020c 	sbc.w	r2, r9, ip
 8001146:	3801      	subs	r0, #1
 8001148:	4696      	mov	lr, r2
 800114a:	e7a4      	b.n	8001096 <__udivmoddi4+0x1f2>
 800114c:	4618      	mov	r0, r3
 800114e:	e7e8      	b.n	8001122 <__udivmoddi4+0x27e>
 8001150:	4608      	mov	r0, r1
 8001152:	e795      	b.n	8001080 <__udivmoddi4+0x1dc>
 8001154:	4607      	mov	r7, r0
 8001156:	e7cf      	b.n	80010f8 <__udivmoddi4+0x254>
 8001158:	4681      	mov	r9, r0
 800115a:	e77b      	b.n	8001054 <__udivmoddi4+0x1b0>
 800115c:	3802      	subs	r0, #2
 800115e:	442c      	add	r4, r5
 8001160:	e747      	b.n	8000ff2 <__udivmoddi4+0x14e>
 8001162:	f1ae 0e02 	sub.w	lr, lr, #2
 8001166:	442b      	add	r3, r5
 8001168:	e72f      	b.n	8000fca <__udivmoddi4+0x126>
 800116a:	4638      	mov	r0, r7
 800116c:	e707      	b.n	8000f7e <__udivmoddi4+0xda>
 800116e:	4637      	mov	r7, r6
 8001170:	e6e8      	b.n	8000f44 <__udivmoddi4+0xa0>
 8001172:	bf00      	nop

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <IIC_Init>:
 *      Author: aninda
 */

#include "iic.h"

int8_t IIC_Init(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <IIC_Init+0x54>)
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <IIC_Init+0x58>)
 8001180:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <IIC_Init+0x54>)
 8001184:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <IIC_Init+0x5c>)
 8001186:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <IIC_Init+0x54>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 210;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <IIC_Init+0x54>)
 8001190:	22d2      	movs	r2, #210	; 0xd2
 8001192:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <IIC_Init+0x54>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <IIC_Init+0x54>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <IIC_Init+0x54>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <IIC_Init+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <IIC_Init+0x54>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <IIC_Init+0x54>)
 80011b6:	f001 fcf9 	bl	8002bac <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <IIC_Init+0x4e>
	{
		return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c4:	e000      	b.n	80011c8 <IIC_Init+0x50>
	}
	return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000cc 	.word	0x200000cc
 80011d0:	40005400 	.word	0x40005400
 80011d4:	00061a80 	.word	0x00061a80

080011d8 <IIC_ReadRegisters>:

int8_t IIC_ReadRegisters(uint8_t devAddress, uint8_t subAddress, uint8_t count, uint8_t* data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	460b      	mov	r3, r1
 80011e6:	71bb      	strb	r3, [r7, #6]
 80011e8:	4613      	mov	r3, r2
 80011ea:	717b      	strb	r3, [r7, #5]
	int8_t ret;
	uint8_t memaddr[1];
	memaddr[0] = subAddress;
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(&hi2c1, devAddress, memaddr, sizeof(memaddr), 100);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b299      	uxth	r1, r3
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	4812      	ldr	r0, [pc, #72]	; (8001248 <IIC_ReadRegisters+0x70>)
 8001200:	f001 fe0c 	bl	8002e1c <HAL_I2C_Master_Transmit>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK){
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <IIC_ReadRegisters+0x3e>
    	return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	e014      	b.n	8001240 <IIC_ReadRegisters+0x68>
    }else{
    	ret = HAL_I2C_Master_Receive(&hi2c1, devAddress, data, count, 100);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	b299      	uxth	r1, r3
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	b29a      	uxth	r2, r3
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4808      	ldr	r0, [pc, #32]	; (8001248 <IIC_ReadRegisters+0x70>)
 8001228:	f001 fef6 	bl	8003018 <HAL_I2C_Master_Receive>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
		if(ret != HAL_OK){
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <IIC_ReadRegisters+0x66>
			return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123c:	e000      	b.n	8001240 <IIC_ReadRegisters+0x68>
		}
    }
    return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000cc 	.word	0x200000cc

0800124c <IIC_WriteRegister>:

int8_t IIC_WriteRegister(uint8_t devAddress, uint8_t subAddress, uint8_t count, uint8_t data){
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b087      	sub	sp, #28
 8001250:	af02      	add	r7, sp, #8
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	4603      	mov	r3, r0
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	460b      	mov	r3, r1
 8001264:	717b      	strb	r3, [r7, #5]
 8001266:	4613      	mov	r3, r2
 8001268:	713b      	strb	r3, [r7, #4]
    int8_t ret;
    uint8_t memaddr_data[2];
    memaddr_data[0] = subAddress;
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	733b      	strb	r3, [r7, #12]
    memaddr_data[1] = data;
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(&hi2c1, devAddress, memaddr_data, sizeof(memaddr_data), 100);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	b299      	uxth	r1, r3
 8001276:	f107 020c 	add.w	r2, r7, #12
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <IIC_WriteRegister+0x58>)
 8001282:	f001 fdcb 	bl	8002e1c <HAL_I2C_Master_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK){
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <IIC_WriteRegister+0x4c>
		return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001296:	e000      	b.n	800129a <IIC_WriteRegister+0x4e>
//		ret = HAL_I2C_Master_Transmit(&hi2c1, devAddress, _data, count, 100);
//		if(ret != HAL_OK){
//			return -1;
//		}
//	}
    return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000cc 	.word	0x200000cc

080012a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b092      	sub	sp, #72	; 0x48
 80012ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2234      	movs	r2, #52	; 0x34
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 fcfc 	bl	8005cb4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <SystemClock_Config+0x98>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <SystemClock_Config+0x98>)
 80012d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d8:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012da:	2302      	movs	r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e2:	2310      	movs	r3, #16
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80012f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80012f8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 ff08 	bl	8005114 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800130a:	f000 fffc 	bl	8002306 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800130e:	230f      	movs	r3, #15
 8001310:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2303      	movs	r3, #3
 8001314:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fa24 	bl	8005774 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001332:	f000 ffe8 	bl	8002306 <Error_Handler>
	}
}
 8001336:	bf00      	nop
 8001338:	3748      	adds	r7, #72	; 0x48
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40007000 	.word	0x40007000

08001344 <MPU_Init>:
static const float G = 9.807f;
static const float _d2r = 3.14159265359f/180.0f;


int8_t MPU_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	// Initialize the IIC peripheral
	IIC_Init();
 8001348:	f7ff ff16 	bl	8001178 <IIC_Init>

	HAL_Delay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f001 f931 	bl	80025b4 <HAL_Delay>

	// reset the MPU9250
	MPU_writeRegister(PWR_MGMNT_1, PWR_RESET);
 8001352:	2180      	movs	r1, #128	; 0x80
 8001354:	206b      	movs	r0, #107	; 0x6b
 8001356:	f000 ff07 	bl	8002168 <MPU_writeRegister>

	HAL_Delay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f001 f92a 	bl	80025b4 <HAL_Delay>

	// select clock source to gyro
	if (MPU_writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL) < 0)
 8001360:	2101      	movs	r1, #1
 8001362:	206b      	movs	r0, #107	; 0x6b
 8001364:	f000 ff00 	bl	8002168 <MPU_writeRegister>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	da02      	bge.n	8001374 <MPU_Init+0x30>
	{
		return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001372:	e16d      	b.n	8001650 <MPU_Init+0x30c>
	}
	// enable I2C master mode
	if (MPU_writeRegister(USER_CTRL, I2C_MST_EN) < 0)
 8001374:	2120      	movs	r1, #32
 8001376:	206a      	movs	r0, #106	; 0x6a
 8001378:	f000 fef6 	bl	8002168 <MPU_writeRegister>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	da02      	bge.n	8001388 <MPU_Init+0x44>
	{
		return -2;
 8001382:	f06f 0301 	mvn.w	r3, #1
 8001386:	e163      	b.n	8001650 <MPU_Init+0x30c>
	}
	// set the I2C bus speed to 400 kHz
	if (MPU_writeRegister(I2C_MST_CTRL, I2C_MST_CLK) < 0)
 8001388:	210d      	movs	r1, #13
 800138a:	2024      	movs	r0, #36	; 0x24
 800138c:	f000 feec 	bl	8002168 <MPU_writeRegister>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	da02      	bge.n	800139c <MPU_Init+0x58>
	{
		return -3;
 8001396:	f06f 0302 	mvn.w	r3, #2
 800139a:	e159      	b.n	8001650 <MPU_Init+0x30c>
	}
	// set AK8963 to Power Down
	MPU_writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 800139c:	2100      	movs	r1, #0
 800139e:	200a      	movs	r0, #10
 80013a0:	f000 ff0e 	bl	80021c0 <MPU_writeAK8963Register>
	// reset the MPU9250
	MPU_writeRegister(PWR_MGMNT_1, PWR_RESET);
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	206b      	movs	r0, #107	; 0x6b
 80013a8:	f000 fede 	bl	8002168 <MPU_writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f001 f901 	bl	80025b4 <HAL_Delay>
	// reset the AK8963
	MPU_writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 80013b2:	2101      	movs	r1, #1
 80013b4:	200b      	movs	r0, #11
 80013b6:	f000 ff03 	bl	80021c0 <MPU_writeAK8963Register>
	// select clock source to gyro
	if (MPU_writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL) < 0)
 80013ba:	2101      	movs	r1, #1
 80013bc:	206b      	movs	r0, #107	; 0x6b
 80013be:	f000 fed3 	bl	8002168 <MPU_writeRegister>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da02      	bge.n	80013ce <MPU_Init+0x8a>
	{
		return -4;
 80013c8:	f06f 0303 	mvn.w	r3, #3
 80013cc:	e140      	b.n	8001650 <MPU_Init+0x30c>
	}
	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	if ((MPU_whoAmI() != 113) && (MPU_whoAmI() != 115))
 80013ce:	f000 f961 	bl	8001694 <MPU_whoAmI>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b71      	cmp	r3, #113	; 0x71
 80013d6:	d007      	beq.n	80013e8 <MPU_Init+0xa4>
 80013d8:	f000 f95c 	bl	8001694 <MPU_whoAmI>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b73      	cmp	r3, #115	; 0x73
 80013e0:	d002      	beq.n	80013e8 <MPU_Init+0xa4>
	{
		return -5;
 80013e2:	f06f 0304 	mvn.w	r3, #4
 80013e6:	e133      	b.n	8001650 <MPU_Init+0x30c>
	}
	// enable accelerometer and gyro
	if (MPU_writeRegister(PWR_MGMNT_2, SEN_ENABLE) < 0)
 80013e8:	2100      	movs	r1, #0
 80013ea:	206c      	movs	r0, #108	; 0x6c
 80013ec:	f000 febc 	bl	8002168 <MPU_writeRegister>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da02      	bge.n	80013fc <MPU_Init+0xb8>
	{
		return -6;
 80013f6:	f06f 0305 	mvn.w	r3, #5
 80013fa:	e129      	b.n	8001650 <MPU_Init+0x30c>
	}
	// setting accel range to 16G as default
	if (MPU_writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_16G) < 0)
 80013fc:	2118      	movs	r1, #24
 80013fe:	201c      	movs	r0, #28
 8001400:	f000 feb2 	bl	8002168 <MPU_writeRegister>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	da02      	bge.n	8001410 <MPU_Init+0xcc>
	{
		return -7;
 800140a:	f06f 0306 	mvn.w	r3, #6
 800140e:	e11f      	b.n	8001650 <MPU_Init+0x30c>
	}
	_accelScale = G * 16.0f / 32767.5f; // setting the accel scale to 16G
 8001410:	4b90      	ldr	r3, [pc, #576]	; (8001654 <MPU_Init+0x310>)
 8001412:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fbdc 	bl	8000bd4 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	498e      	ldr	r1, [pc, #568]	; (8001658 <MPU_Init+0x314>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc8b 	bl	8000d3c <__aeabi_fdiv>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b8c      	ldr	r3, [pc, #560]	; (800165c <MPU_Init+0x318>)
 800142c:	601a      	str	r2, [r3, #0]
	_accelRange = ACCEL_RANGE_16G;
 800142e:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <MPU_Init+0x31c>)
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
	// setting the gyro range to 2000DPS as default
	if (MPU_writeRegister(GYRO_CONFIG, GYRO_FS_SEL_2000DPS) < 0)
 8001434:	2118      	movs	r1, #24
 8001436:	201b      	movs	r0, #27
 8001438:	f000 fe96 	bl	8002168 <MPU_writeRegister>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	da02      	bge.n	8001448 <MPU_Init+0x104>
	{
		return -8;
 8001442:	f06f 0307 	mvn.w	r3, #7
 8001446:	e103      	b.n	8001650 <MPU_Init+0x30c>
	}
	_gyroScale = 2000.0f / 32767.5f * _d2r; // setting the gyro scale to 2000DPS
 8001448:	4b86      	ldr	r3, [pc, #536]	; (8001664 <MPU_Init+0x320>)
 800144a:	4987      	ldr	r1, [pc, #540]	; (8001668 <MPU_Init+0x324>)
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fbc1 	bl	8000bd4 <__aeabi_fmul>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <MPU_Init+0x328>)
 8001458:	601a      	str	r2, [r3, #0]
	_gyroRange = GYRO_RANGE_2000DPS;
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <MPU_Init+0x32c>)
 800145c:	2203      	movs	r2, #3
 800145e:	701a      	strb	r2, [r3, #0]
	// setting bandwidth to 184Hz as default
	if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_184) < 0)
 8001460:	2101      	movs	r1, #1
 8001462:	201d      	movs	r0, #29
 8001464:	f000 fe80 	bl	8002168 <MPU_writeRegister>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	da02      	bge.n	8001474 <MPU_Init+0x130>
	{
		return -9;
 800146e:	f06f 0308 	mvn.w	r3, #8
 8001472:	e0ed      	b.n	8001650 <MPU_Init+0x30c>
	}
	if (MPU_writeRegister(CONFIG, GYRO_DLPF_184) < 0)
 8001474:	2101      	movs	r1, #1
 8001476:	201a      	movs	r0, #26
 8001478:	f000 fe76 	bl	8002168 <MPU_writeRegister>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	da02      	bge.n	8001488 <MPU_Init+0x144>
	{ // setting gyro bandwidth to 184Hz
		return -10;
 8001482:	f06f 0309 	mvn.w	r3, #9
 8001486:	e0e3      	b.n	8001650 <MPU_Init+0x30c>
	}
	_bandwidth = DLPF_BANDWIDTH_184HZ;
 8001488:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <MPU_Init+0x330>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	// setting the sample rate divider to 0 as default
	if (MPU_writeRegister(SMPDIV, 0x00) < 0)
 800148e:	2100      	movs	r1, #0
 8001490:	2019      	movs	r0, #25
 8001492:	f000 fe69 	bl	8002168 <MPU_writeRegister>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	da02      	bge.n	80014a2 <MPU_Init+0x15e>
	{
		return -11;
 800149c:	f06f 030a 	mvn.w	r3, #10
 80014a0:	e0d6      	b.n	8001650 <MPU_Init+0x30c>
	}
	_srd = 0;
 80014a2:	4b75      	ldr	r3, [pc, #468]	; (8001678 <MPU_Init+0x334>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	// enable I2C master mode
	if (MPU_writeRegister(USER_CTRL, I2C_MST_EN) < 0)
 80014a8:	2120      	movs	r1, #32
 80014aa:	206a      	movs	r0, #106	; 0x6a
 80014ac:	f000 fe5c 	bl	8002168 <MPU_writeRegister>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da02      	bge.n	80014bc <MPU_Init+0x178>
	{
		return -12;
 80014b6:	f06f 030b 	mvn.w	r3, #11
 80014ba:	e0c9      	b.n	8001650 <MPU_Init+0x30c>
	}
	// set the I2C bus speed to 400 kHz
	if (MPU_writeRegister(I2C_MST_CTRL, I2C_MST_CLK) < 0)
 80014bc:	210d      	movs	r1, #13
 80014be:	2024      	movs	r0, #36	; 0x24
 80014c0:	f000 fe52 	bl	8002168 <MPU_writeRegister>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da02      	bge.n	80014d0 <MPU_Init+0x18c>
	{
		return -13;
 80014ca:	f06f 030c 	mvn.w	r3, #12
 80014ce:	e0bf      	b.n	8001650 <MPU_Init+0x30c>
//	{
//		return -14;
//	}
	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN) < 0)
 80014d0:	2100      	movs	r1, #0
 80014d2:	200a      	movs	r0, #10
 80014d4:	f000 fe74 	bl	80021c0 <MPU_writeAK8963Register>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da02      	bge.n	80014e4 <MPU_Init+0x1a0>
	{
		return -15;
 80014de:	f06f 030e 	mvn.w	r3, #14
 80014e2:	e0b5      	b.n	8001650 <MPU_Init+0x30c>
	}
	HAL_Delay(100); // long wait between AK8963 mode changes
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f001 f865 	bl	80025b4 <HAL_Delay>
	// set AK8963 to FUSE ROM access
	if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM) < 0)
 80014ea:	210f      	movs	r1, #15
 80014ec:	200a      	movs	r0, #10
 80014ee:	f000 fe67 	bl	80021c0 <MPU_writeAK8963Register>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da02      	bge.n	80014fe <MPU_Init+0x1ba>
	{
		return -16;
 80014f8:	f06f 030f 	mvn.w	r3, #15
 80014fc:	e0a8      	b.n	8001650 <MPU_Init+0x30c>
	}
	HAL_Delay(100); // long wait between AK8963 mode changes
 80014fe:	2064      	movs	r0, #100	; 0x64
 8001500:	f001 f858 	bl	80025b4 <HAL_Delay>
	// read the AK8963 ASA registers and compute magnetometer scale factors
	MPU_readAK8963Registers(AK8963_ASA, 3, _buffer);
 8001504:	4a5d      	ldr	r2, [pc, #372]	; (800167c <MPU_Init+0x338>)
 8001506:	2103      	movs	r1, #3
 8001508:	2010      	movs	r0, #16
 800150a:	f000 fea7 	bl	800225c <MPU_readAK8963Registers>
	_magScaleX = ((((float) _buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <MPU_Init+0x338>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fb06 	bl	8000b24 <__aeabi_ui2f>
 8001518:	4603      	mov	r3, r0
 800151a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fa4e 	bl	80009c0 <__aeabi_fsub>
 8001524:	4603      	mov	r3, r0
 8001526:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc06 	bl	8000d3c <__aeabi_fdiv>
 8001530:	4603      	mov	r3, r0
 8001532:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fa44 	bl	80009c4 <__addsf3>
 800153c:	4603      	mov	r3, r0
 800153e:	4950      	ldr	r1, [pc, #320]	; (8001680 <MPU_Init+0x33c>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fb47 	bl	8000bd4 <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	494e      	ldr	r1, [pc, #312]	; (8001684 <MPU_Init+0x340>)
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbf6 	bl	8000d3c <__aeabi_fdiv>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <MPU_Init+0x344>)
 8001556:	601a      	str	r2, [r3, #0]
	_magScaleY = ((((float) _buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <MPU_Init+0x338>)
 800155a:	785b      	ldrb	r3, [r3, #1]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fae1 	bl	8000b24 <__aeabi_ui2f>
 8001562:	4603      	mov	r3, r0
 8001564:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fa29 	bl	80009c0 <__aeabi_fsub>
 800156e:	4603      	mov	r3, r0
 8001570:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fbe1 	bl	8000d3c <__aeabi_fdiv>
 800157a:	4603      	mov	r3, r0
 800157c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fa1f 	bl	80009c4 <__addsf3>
 8001586:	4603      	mov	r3, r0
 8001588:	493d      	ldr	r1, [pc, #244]	; (8001680 <MPU_Init+0x33c>)
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb22 	bl	8000bd4 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	493c      	ldr	r1, [pc, #240]	; (8001684 <MPU_Init+0x340>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fbd1 	bl	8000d3c <__aeabi_fdiv>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <MPU_Init+0x348>)
 80015a0:	601a      	str	r2, [r3, #0]
	_magScaleZ = ((((float) _buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f / 32760.0f; // micro Tesla
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <MPU_Init+0x338>)
 80015a4:	789b      	ldrb	r3, [r3, #2]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fabc 	bl	8000b24 <__aeabi_ui2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fa04 	bl	80009c0 <__aeabi_fsub>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fbbc 	bl	8000d3c <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9fa 	bl	80009c4 <__addsf3>
 80015d0:	4603      	mov	r3, r0
 80015d2:	492b      	ldr	r1, [pc, #172]	; (8001680 <MPU_Init+0x33c>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fafd 	bl	8000bd4 <__aeabi_fmul>
 80015da:	4603      	mov	r3, r0
 80015dc:	4929      	ldr	r1, [pc, #164]	; (8001684 <MPU_Init+0x340>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fbac 	bl	8000d3c <__aeabi_fdiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MPU_Init+0x34c>)
 80015ea:	601a      	str	r2, [r3, #0]
	// set AK8963 to Power Down
	if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN) < 0)
 80015ec:	2100      	movs	r1, #0
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 fde6 	bl	80021c0 <MPU_writeAK8963Register>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da02      	bge.n	8001600 <MPU_Init+0x2bc>
	{
		return -17;
 80015fa:	f06f 0310 	mvn.w	r3, #16
 80015fe:	e027      	b.n	8001650 <MPU_Init+0x30c>
	}
	HAL_Delay(100); // long wait between AK8963 mode changes
 8001600:	2064      	movs	r0, #100	; 0x64
 8001602:	f000 ffd7 	bl	80025b4 <HAL_Delay>
	// set AK8963 to 16 bit resolution, 100 Hz update rate
	if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2) < 0)
 8001606:	2116      	movs	r1, #22
 8001608:	200a      	movs	r0, #10
 800160a:	f000 fdd9 	bl	80021c0 <MPU_writeAK8963Register>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	da02      	bge.n	800161a <MPU_Init+0x2d6>
	{
		return -18;
 8001614:	f06f 0311 	mvn.w	r3, #17
 8001618:	e01a      	b.n	8001650 <MPU_Init+0x30c>
	}
	HAL_Delay(100); // long wait between AK8963 mode changes
 800161a:	2064      	movs	r0, #100	; 0x64
 800161c:	f000 ffca 	bl	80025b4 <HAL_Delay>
	// select clock source to gyro
	if (MPU_writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL) < 0)
 8001620:	2101      	movs	r1, #1
 8001622:	206b      	movs	r0, #107	; 0x6b
 8001624:	f000 fda0 	bl	8002168 <MPU_writeRegister>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	da02      	bge.n	8001634 <MPU_Init+0x2f0>
	{
		return -19;
 800162e:	f06f 0312 	mvn.w	r3, #18
 8001632:	e00d      	b.n	8001650 <MPU_Init+0x30c>
	}
	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	MPU_readAK8963Registers(AK8963_HXL, 7, _buffer);
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <MPU_Init+0x338>)
 8001636:	2107      	movs	r1, #7
 8001638:	2003      	movs	r0, #3
 800163a:	f000 fe0f 	bl	800225c <MPU_readAK8963Registers>
	// estimate gyro bias
	if (calibrateGyro() < 0)
 800163e:	f000 fc6b 	bl	8001f18 <calibrateGyro>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	da02      	bge.n	800164e <MPU_Init+0x30a>
	{
		return -20;
 8001648:	f06f 0313 	mvn.w	r3, #19
 800164c:	e000      	b.n	8001650 <MPU_Init+0x30c>
	}
	// successful init, return 1
	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	411ce979 	.word	0x411ce979
 8001658:	46ffff00 	.word	0x46ffff00
 800165c:	20000074 	.word	0x20000074
 8001660:	20000088 	.word	0x20000088
 8001664:	3c8efa35 	.word	0x3c8efa35
 8001668:	3d7a00fa 	.word	0x3d7a00fa
 800166c:	20000078 	.word	0x20000078
 8001670:	20000089 	.word	0x20000089
 8001674:	2000008a 	.word	0x2000008a
 8001678:	2000008b 	.word	0x2000008b
 800167c:	20000048 	.word	0x20000048
 8001680:	45998000 	.word	0x45998000
 8001684:	46fff000 	.word	0x46fff000
 8001688:	2000007c 	.word	0x2000007c
 800168c:	20000080 	.word	0x20000080
 8001690:	20000084 	.word	0x20000084

08001694 <MPU_whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int8_t MPU_whoAmI()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	if (MPU_readRegisters(WHO_AM_I, 1, _buffer) < 0)
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <MPU_whoAmI+0x24>)
 800169a:	2101      	movs	r1, #1
 800169c:	2075      	movs	r0, #117	; 0x75
 800169e:	f000 fd4f 	bl	8002140 <MPU_readRegisters>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da02      	bge.n	80016ae <MPU_whoAmI+0x1a>
	{
		return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ac:	e002      	b.n	80016b4 <MPU_whoAmI+0x20>
	}
	// return the register value
	return _buffer[0];
 80016ae:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <MPU_whoAmI+0x24>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b25b      	sxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000048 	.word	0x20000048

080016bc <setGyroRange>:
	return 1;
}

/* sets the gyro full scale range to values other than default */
int8_t setGyroRange(GyroRange range)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]

	switch (range)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d85b      	bhi.n	8001784 <setGyroRange+0xc8>
 80016cc:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <setGyroRange+0x18>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	0800170d 	.word	0x0800170d
 80016dc:	08001735 	.word	0x08001735
 80016e0:	0800175d 	.word	0x0800175d
	{
		case GYRO_RANGE_250DPS:
		{
			// setting the gyro range to 250DPS
			if (MPU_writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS) < 0)
 80016e4:	2100      	movs	r1, #0
 80016e6:	201b      	movs	r0, #27
 80016e8:	f000 fd3e 	bl	8002168 <MPU_writeRegister>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da02      	bge.n	80016f8 <setGyroRange+0x3c>
			{
				return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f6:	e049      	b.n	800178c <setGyroRange+0xd0>
			}
			_gyroScale = 250.0f / 32767.5f * _d2r; // setting the gyro scale to 250DPS
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <setGyroRange+0xd8>)
 80016fa:	4927      	ldr	r1, [pc, #156]	; (8001798 <setGyroRange+0xdc>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa69 	bl	8000bd4 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <setGyroRange+0xe0>)
 8001708:	601a      	str	r2, [r3, #0]
			break;
 800170a:	e03b      	b.n	8001784 <setGyroRange+0xc8>
		}
		case GYRO_RANGE_500DPS:
		{
			// setting the gyro range to 500DPS
			if (MPU_writeRegister(GYRO_CONFIG, GYRO_FS_SEL_500DPS) < 0)
 800170c:	2108      	movs	r1, #8
 800170e:	201b      	movs	r0, #27
 8001710:	f000 fd2a 	bl	8002168 <MPU_writeRegister>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	da02      	bge.n	8001720 <setGyroRange+0x64>
			{
				return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	e035      	b.n	800178c <setGyroRange+0xd0>
			}
			_gyroScale = 500.0f / 32767.5f * _d2r; // setting the gyro scale to 500DPS
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <setGyroRange+0xd8>)
 8001722:	491f      	ldr	r1, [pc, #124]	; (80017a0 <setGyroRange+0xe4>)
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fa55 	bl	8000bd4 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <setGyroRange+0xe0>)
 8001730:	601a      	str	r2, [r3, #0]
			break;
 8001732:	e027      	b.n	8001784 <setGyroRange+0xc8>
		}
		case GYRO_RANGE_1000DPS:
		{
			// setting the gyro range to 1000DPS
			if (MPU_writeRegister(GYRO_CONFIG, GYRO_FS_SEL_1000DPS) < 0)
 8001734:	2110      	movs	r1, #16
 8001736:	201b      	movs	r0, #27
 8001738:	f000 fd16 	bl	8002168 <MPU_writeRegister>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	da02      	bge.n	8001748 <setGyroRange+0x8c>
			{
				return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001746:	e021      	b.n	800178c <setGyroRange+0xd0>
			}
			_gyroScale = 1000.0f / 32767.5f * _d2r; // setting the gyro scale to 1000DPS
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <setGyroRange+0xd8>)
 800174a:	4916      	ldr	r1, [pc, #88]	; (80017a4 <setGyroRange+0xe8>)
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fa41 	bl	8000bd4 <__aeabi_fmul>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <setGyroRange+0xe0>)
 8001758:	601a      	str	r2, [r3, #0]
			break;
 800175a:	e013      	b.n	8001784 <setGyroRange+0xc8>
		}
		case GYRO_RANGE_2000DPS:
		{
			// setting the gyro range to 2000DPS
			if (MPU_writeRegister(GYRO_CONFIG, GYRO_FS_SEL_2000DPS) < 0)
 800175c:	2118      	movs	r1, #24
 800175e:	201b      	movs	r0, #27
 8001760:	f000 fd02 	bl	8002168 <MPU_writeRegister>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	da02      	bge.n	8001770 <setGyroRange+0xb4>
			{
				return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176e:	e00d      	b.n	800178c <setGyroRange+0xd0>
			}
			_gyroScale = 2000.0f / 32767.5f * _d2r; // setting the gyro scale to 2000DPS
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <setGyroRange+0xd8>)
 8001772:	490d      	ldr	r1, [pc, #52]	; (80017a8 <setGyroRange+0xec>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fa2d 	bl	8000bd4 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <setGyroRange+0xe0>)
 8001780:	601a      	str	r2, [r3, #0]
			break;
 8001782:	bf00      	nop
		}
	}
	_gyroRange = range;
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <setGyroRange+0xf0>)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	7013      	strb	r3, [r2, #0]
	return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	3c8efa35 	.word	0x3c8efa35
 8001798:	3bfa00fa 	.word	0x3bfa00fa
 800179c:	20000078 	.word	0x20000078
 80017a0:	3c7a00fa 	.word	0x3c7a00fa
 80017a4:	3cfa00fa 	.word	0x3cfa00fa
 80017a8:	3d7a00fa 	.word	0x3d7a00fa
 80017ac:	20000089 	.word	0x20000089

080017b0 <setDlpfBandwidth>:

/* sets the DLPF bandwidth to values other than default */
int8_t setDlpfBandwidth(DlpfBandwidth bandwidth)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	switch (bandwidth)
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	f200 8092 	bhi.w	80018e6 <setDlpfBandwidth+0x136>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <setDlpfBandwidth+0x18>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	08001809 	.word	0x08001809
 80017d0:	08001831 	.word	0x08001831
 80017d4:	08001859 	.word	0x08001859
 80017d8:	08001881 	.word	0x08001881
 80017dc:	080018a9 	.word	0x080018a9
	{
		case DLPF_BANDWIDTH_184HZ:
		{
			if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_184) < 0)
 80017e0:	2101      	movs	r1, #1
 80017e2:	201d      	movs	r0, #29
 80017e4:	f000 fcc0 	bl	8002168 <MPU_writeRegister>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da02      	bge.n	80017f4 <setDlpfBandwidth+0x44>
			{ // setting accel bandwidth to 184Hz
				return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f2:	e07c      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			if (MPU_writeRegister(CONFIG, GYRO_DLPF_184) < 0)
 80017f4:	2101      	movs	r1, #1
 80017f6:	201a      	movs	r0, #26
 80017f8:	f000 fcb6 	bl	8002168 <MPU_writeRegister>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da66      	bge.n	80018d0 <setDlpfBandwidth+0x120>
			{ // setting gyro bandwidth to 184Hz
				return -2;
 8001802:	f06f 0301 	mvn.w	r3, #1
 8001806:	e072      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			break;
		}
		case DLPF_BANDWIDTH_92HZ:
		{
			if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_92) < 0)
 8001808:	2102      	movs	r1, #2
 800180a:	201d      	movs	r0, #29
 800180c:	f000 fcac 	bl	8002168 <MPU_writeRegister>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	da02      	bge.n	800181c <setDlpfBandwidth+0x6c>
			{ // setting accel bandwidth to 92Hz
				return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181a:	e068      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			if (MPU_writeRegister(CONFIG, GYRO_DLPF_92) < 0)
 800181c:	2102      	movs	r1, #2
 800181e:	201a      	movs	r0, #26
 8001820:	f000 fca2 	bl	8002168 <MPU_writeRegister>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	da54      	bge.n	80018d4 <setDlpfBandwidth+0x124>
			{ // setting gyro bandwidth to 92Hz
				return -2;
 800182a:	f06f 0301 	mvn.w	r3, #1
 800182e:	e05e      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			break;
		}
		case DLPF_BANDWIDTH_41HZ:
		{
			if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_41) < 0)
 8001830:	2103      	movs	r1, #3
 8001832:	201d      	movs	r0, #29
 8001834:	f000 fc98 	bl	8002168 <MPU_writeRegister>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	da02      	bge.n	8001844 <setDlpfBandwidth+0x94>
			{ // setting accel bandwidth to 41Hz
				return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001842:	e054      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			if (MPU_writeRegister(CONFIG, GYRO_DLPF_41) < 0)
 8001844:	2103      	movs	r1, #3
 8001846:	201a      	movs	r0, #26
 8001848:	f000 fc8e 	bl	8002168 <MPU_writeRegister>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	da42      	bge.n	80018d8 <setDlpfBandwidth+0x128>
			{ // setting gyro bandwidth to 41Hz
				return -2;
 8001852:	f06f 0301 	mvn.w	r3, #1
 8001856:	e04a      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			break;
		}
		case DLPF_BANDWIDTH_20HZ:
		{
			if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_20) < 0)
 8001858:	2104      	movs	r1, #4
 800185a:	201d      	movs	r0, #29
 800185c:	f000 fc84 	bl	8002168 <MPU_writeRegister>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <setDlpfBandwidth+0xbc>
			{ // setting accel bandwidth to 20Hz
				return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186a:	e040      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			if (MPU_writeRegister(CONFIG, GYRO_DLPF_20) < 0)
 800186c:	2104      	movs	r1, #4
 800186e:	201a      	movs	r0, #26
 8001870:	f000 fc7a 	bl	8002168 <MPU_writeRegister>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	da30      	bge.n	80018dc <setDlpfBandwidth+0x12c>
			{ // setting gyro bandwidth to 20Hz
				return -2;
 800187a:	f06f 0301 	mvn.w	r3, #1
 800187e:	e036      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			break;
		}
		case DLPF_BANDWIDTH_10HZ:
		{
			if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_10) < 0)
 8001880:	2105      	movs	r1, #5
 8001882:	201d      	movs	r0, #29
 8001884:	f000 fc70 	bl	8002168 <MPU_writeRegister>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	da02      	bge.n	8001894 <setDlpfBandwidth+0xe4>
			{ // setting accel bandwidth to 10Hz
				return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001892:	e02c      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			if (MPU_writeRegister(CONFIG, GYRO_DLPF_10) < 0)
 8001894:	2105      	movs	r1, #5
 8001896:	201a      	movs	r0, #26
 8001898:	f000 fc66 	bl	8002168 <MPU_writeRegister>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da1e      	bge.n	80018e0 <setDlpfBandwidth+0x130>
			{ // setting gyro bandwidth to 10Hz
				return -2;
 80018a2:	f06f 0301 	mvn.w	r3, #1
 80018a6:	e022      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			break;
		}
		case DLPF_BANDWIDTH_5HZ:
		{
			if (MPU_writeRegister(ACCEL_CONFIG2, ACCEL_DLPF_5) < 0)
 80018a8:	2106      	movs	r1, #6
 80018aa:	201d      	movs	r0, #29
 80018ac:	f000 fc5c 	bl	8002168 <MPU_writeRegister>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da02      	bge.n	80018bc <setDlpfBandwidth+0x10c>
			{ // setting accel bandwidth to 5Hz
				return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	e018      	b.n	80018ee <setDlpfBandwidth+0x13e>
			}
			if (MPU_writeRegister(CONFIG, GYRO_DLPF_5) < 0)
 80018bc:	2106      	movs	r1, #6
 80018be:	201a      	movs	r0, #26
 80018c0:	f000 fc52 	bl	8002168 <MPU_writeRegister>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da0c      	bge.n	80018e4 <setDlpfBandwidth+0x134>
			{ // setting gyro bandwidth to 5Hz
				return -2;
 80018ca:	f06f 0301 	mvn.w	r3, #1
 80018ce:	e00e      	b.n	80018ee <setDlpfBandwidth+0x13e>
			break;
 80018d0:	bf00      	nop
 80018d2:	e008      	b.n	80018e6 <setDlpfBandwidth+0x136>
			break;
 80018d4:	bf00      	nop
 80018d6:	e006      	b.n	80018e6 <setDlpfBandwidth+0x136>
			break;
 80018d8:	bf00      	nop
 80018da:	e004      	b.n	80018e6 <setDlpfBandwidth+0x136>
			break;
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <setDlpfBandwidth+0x136>
			break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <setDlpfBandwidth+0x136>
			}
			break;
 80018e4:	bf00      	nop
		}
	}
	_bandwidth = bandwidth;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <setDlpfBandwidth+0x148>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	7013      	strb	r3, [r2, #0]
	return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000008a 	.word	0x2000008a

080018fc <setSrd>:

/* sets the sample rate divider to values other than default */
int8_t setSrd(uint8_t srd)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	/* setting the sample rate divider to 19 to facilitate setting up magnetometer */
	if (MPU_writeRegister(SMPDIV, 19) < 0)
 8001906:	2113      	movs	r1, #19
 8001908:	2019      	movs	r0, #25
 800190a:	f000 fc2d 	bl	8002168 <MPU_writeRegister>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	da02      	bge.n	800191a <setSrd+0x1e>
	{ // setting the sample rate divider
		return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001918:	e050      	b.n	80019bc <setSrd+0xc0>
	}
	if (srd > 9)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b09      	cmp	r3, #9
 800191e:	d91f      	bls.n	8001960 <setSrd+0x64>
	{
		// set AK8963 to Power Down
		if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN) < 0)
 8001920:	2100      	movs	r1, #0
 8001922:	200a      	movs	r0, #10
 8001924:	f000 fc4c 	bl	80021c0 <MPU_writeAK8963Register>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	da02      	bge.n	8001934 <setSrd+0x38>
		{
			return -2;
 800192e:	f06f 0301 	mvn.w	r3, #1
 8001932:	e043      	b.n	80019bc <setSrd+0xc0>
		}
		HAL_Delay(100); // long wait between AK8963 mode changes
 8001934:	2064      	movs	r0, #100	; 0x64
 8001936:	f000 fe3d 	bl	80025b4 <HAL_Delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS1) < 0)
 800193a:	2112      	movs	r1, #18
 800193c:	200a      	movs	r0, #10
 800193e:	f000 fc3f 	bl	80021c0 <MPU_writeAK8963Register>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	da02      	bge.n	800194e <setSrd+0x52>
		{
			return -3;
 8001948:	f06f 0302 	mvn.w	r3, #2
 800194c:	e036      	b.n	80019bc <setSrd+0xc0>
		}
		HAL_Delay(100); // long wait between AK8963 mode changes
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f000 fe30 	bl	80025b4 <HAL_Delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		MPU_readAK8963Registers(AK8963_HXL, 7, _buffer);
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <setSrd+0xc8>)
 8001956:	2107      	movs	r1, #7
 8001958:	2003      	movs	r0, #3
 800195a:	f000 fc7f 	bl	800225c <MPU_readAK8963Registers>
 800195e:	e01e      	b.n	800199e <setSrd+0xa2>
	}
	else
	{
		// set AK8963 to Power Down
		if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN) < 0)
 8001960:	2100      	movs	r1, #0
 8001962:	200a      	movs	r0, #10
 8001964:	f000 fc2c 	bl	80021c0 <MPU_writeAK8963Register>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	da02      	bge.n	8001974 <setSrd+0x78>
		{
			return -2;
 800196e:	f06f 0301 	mvn.w	r3, #1
 8001972:	e023      	b.n	80019bc <setSrd+0xc0>
		}
		HAL_Delay(100); // long wait between AK8963 mode changes
 8001974:	2064      	movs	r0, #100	; 0x64
 8001976:	f000 fe1d 	bl	80025b4 <HAL_Delay>
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		if (MPU_writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2) < 0)
 800197a:	2116      	movs	r1, #22
 800197c:	200a      	movs	r0, #10
 800197e:	f000 fc1f 	bl	80021c0 <MPU_writeAK8963Register>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	da02      	bge.n	800198e <setSrd+0x92>
		{
			return -3;
 8001988:	f06f 0302 	mvn.w	r3, #2
 800198c:	e016      	b.n	80019bc <setSrd+0xc0>
		}
		HAL_Delay(100); // long wait between AK8963 mode changes
 800198e:	2064      	movs	r0, #100	; 0x64
 8001990:	f000 fe10 	bl	80025b4 <HAL_Delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		MPU_readAK8963Registers(AK8963_HXL, 7, _buffer);
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <setSrd+0xc8>)
 8001996:	2107      	movs	r1, #7
 8001998:	2003      	movs	r0, #3
 800199a:	f000 fc5f 	bl	800225c <MPU_readAK8963Registers>
	}
	/* setting the sample rate divider */
	if (MPU_writeRegister(SMPDIV, srd) < 0)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	4619      	mov	r1, r3
 80019a2:	2019      	movs	r0, #25
 80019a4:	f000 fbe0 	bl	8002168 <MPU_writeRegister>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da02      	bge.n	80019b4 <setSrd+0xb8>
	{ // setting the sample rate divider
		return -4;
 80019ae:	f06f 0303 	mvn.w	r3, #3
 80019b2:	e003      	b.n	80019bc <setSrd+0xc0>
	}
	_srd = srd;
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <setSrd+0xcc>)
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	7013      	strb	r3, [r2, #0]
	return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000048 	.word	0x20000048
 80019c8:	2000008b 	.word	0x2000008b

080019cc <MPU_readSensor>:
	return 1;
}

/* reads the most current data from MPU9250 and stores in buffer */
int8_t MPU_readSensor()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

	// grab the data from the MPU9250
	if (MPU_readRegisters(ACCEL_OUT, 21, _buffer) < 0)
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <MPU_readSensor+0x1c>)
 80019d2:	2115      	movs	r1, #21
 80019d4:	203b      	movs	r0, #59	; 0x3b
 80019d6:	f000 fbb3 	bl	8002140 <MPU_readRegisters>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da05      	bge.n	80019ec <MPU_readSensor+0x20>
	{
		return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e4:	e248      	b.n	8001e78 <MPU_readSensor+0x4ac>
 80019e6:	bf00      	nop
 80019e8:	20000048 	.word	0x20000048
	}
	// combine into 16 bit values
	_axcounts = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 80019ec:	4ba2      	ldr	r3, [pc, #648]	; (8001c78 <MPU_readSensor+0x2ac>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4ba0      	ldr	r3, [pc, #640]	; (8001c78 <MPU_readSensor+0x2ac>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b9f      	ldr	r3, [pc, #636]	; (8001c7c <MPU_readSensor+0x2b0>)
 8001a00:	801a      	strh	r2, [r3, #0]
	_aycounts = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 8001a02:	4b9d      	ldr	r3, [pc, #628]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a04:	789b      	ldrb	r3, [r3, #2]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b9b      	ldr	r3, [pc, #620]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a0c:	78db      	ldrb	r3, [r3, #3]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <MPU_readSensor+0x2b4>)
 8001a16:	801a      	strh	r2, [r3, #0]
	_azcounts = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 8001a18:	4b97      	ldr	r3, [pc, #604]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a1a:	791b      	ldrb	r3, [r3, #4]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b95      	ldr	r3, [pc, #596]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a22:	795b      	ldrb	r3, [r3, #5]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	4b96      	ldr	r3, [pc, #600]	; (8001c84 <MPU_readSensor+0x2b8>)
 8001a2c:	801a      	strh	r2, [r3, #0]
	_tcounts = (((int16_t) _buffer[6]) << 8) | _buffer[7];
 8001a2e:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a30:	799b      	ldrb	r3, [r3, #6]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	4b90      	ldr	r3, [pc, #576]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a38:	79db      	ldrb	r3, [r3, #7]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	4b91      	ldr	r3, [pc, #580]	; (8001c88 <MPU_readSensor+0x2bc>)
 8001a42:	801a      	strh	r2, [r3, #0]
	_gxcounts = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 8001a44:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a46:	7a1b      	ldrb	r3, [r3, #8]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a4e:	7a5b      	ldrb	r3, [r3, #9]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <MPU_readSensor+0x2c0>)
 8001a58:	801a      	strh	r2, [r3, #0]
	_gycounts = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 8001a5a:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a5c:	7a9b      	ldrb	r3, [r3, #10]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b85      	ldr	r3, [pc, #532]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a64:	7adb      	ldrb	r3, [r3, #11]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <MPU_readSensor+0x2c4>)
 8001a6e:	801a      	strh	r2, [r3, #0]
	_gzcounts = (((int16_t) _buffer[12]) << 8) | _buffer[13];
 8001a70:	4b81      	ldr	r3, [pc, #516]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a7a:	7b5b      	ldrb	r3, [r3, #13]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b84      	ldr	r3, [pc, #528]	; (8001c94 <MPU_readSensor+0x2c8>)
 8001a84:	801a      	strh	r2, [r3, #0]
	_hxcounts = (((int16_t) _buffer[15]) << 8) | _buffer[14];
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a88:	7bdb      	ldrb	r3, [r3, #15]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a90:	7b9b      	ldrb	r3, [r3, #14]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b7f      	ldr	r3, [pc, #508]	; (8001c98 <MPU_readSensor+0x2cc>)
 8001a9a:	801a      	strh	r2, [r3, #0]
	_hycounts = (((int16_t) _buffer[17]) << 8) | _buffer[16];
 8001a9c:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001a9e:	7c5b      	ldrb	r3, [r3, #17]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	4b74      	ldr	r3, [pc, #464]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001aa6:	7c1b      	ldrb	r3, [r3, #16]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <MPU_readSensor+0x2d0>)
 8001ab0:	801a      	strh	r2, [r3, #0]
	_hzcounts = (((int16_t) _buffer[19]) << 8) | _buffer[18];
 8001ab2:	4b71      	ldr	r3, [pc, #452]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001ab4:	7cdb      	ldrb	r3, [r3, #19]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <MPU_readSensor+0x2ac>)
 8001abc:	7c9b      	ldrb	r3, [r3, #18]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <MPU_readSensor+0x2d4>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	// transform and convert to float values
	_accelerometer_val[0] = (((float) (tX[0] * _axcounts + tX[1] * _aycounts + tX[2] * _azcounts) * _accelScale) - _axb) * _axs;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b6b      	ldr	r3, [pc, #428]	; (8001c7c <MPU_readSensor+0x2b0>)
 8001ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <MPU_readSensor+0x2b4>)
 8001adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae0:	fb03 f301 	mul.w	r3, r3, r1
 8001ae4:	441a      	add	r2, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <MPU_readSensor+0x2b8>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	fb03 f301 	mul.w	r3, r3, r1
 8001af4:	4413      	add	r3, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f818 	bl	8000b2c <__aeabi_i2f>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b69      	ldr	r3, [pc, #420]	; (8001ca4 <MPU_readSensor+0x2d8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff f865 	bl	8000bd4 <__aeabi_fmul>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <MPU_readSensor+0x2dc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7fe ff53 	bl	80009c0 <__aeabi_fsub>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <MPU_readSensor+0x2e0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff f855 	bl	8000bd4 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <MPU_readSensor+0x2e4>)
 8001b30:	601a      	str	r2, [r3, #0]
	_accelerometer_val[1] = (((float) (tY[0] * _axcounts + tY[1] * _aycounts + tY[2] * _azcounts) * _accelScale) - _ayb) * _ays;
 8001b32:	2301      	movs	r3, #1
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <MPU_readSensor+0x2b0>)
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	fb03 f202 	mul.w	r2, r3, r2
 8001b40:	2300      	movs	r3, #0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <MPU_readSensor+0x2b4>)
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	fb03 f301 	mul.w	r3, r3, r1
 8001b4e:	441a      	add	r2, r3
 8001b50:	2300      	movs	r3, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <MPU_readSensor+0x2b8>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	fb03 f301 	mul.w	r3, r3, r1
 8001b5e:	4413      	add	r3, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe ffe3 	bl	8000b2c <__aeabi_i2f>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b4e      	ldr	r3, [pc, #312]	; (8001ca4 <MPU_readSensor+0x2d8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7ff f830 	bl	8000bd4 <__aeabi_fmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <MPU_readSensor+0x2e8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f7fe ff1e 	bl	80009c0 <__aeabi_fsub>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <MPU_readSensor+0x2ec>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff f820 	bl	8000bd4 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <MPU_readSensor+0x2e4>)
 8001b9a:	605a      	str	r2, [r3, #4]
	_accelerometer_val[2] = (((float) (tZ[0] * _axcounts + tZ[1] * _aycounts + tZ[2] * _azcounts) * _accelScale) - _azb) * _azs;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <MPU_readSensor+0x2b0>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	fb03 f202 	mul.w	r2, r3, r2
 8001baa:	2300      	movs	r3, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MPU_readSensor+0x2b4>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	fb03 f301 	mul.w	r3, r3, r1
 8001bb8:	441a      	add	r2, r3
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <MPU_readSensor+0x2b8>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	fb03 f301 	mul.w	r3, r3, r1
 8001bca:	4413      	add	r3, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe ffad 	bl	8000b2c <__aeabi_i2f>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <MPU_readSensor+0x2d8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7fe fffa 	bl	8000bd4 <__aeabi_fmul>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <MPU_readSensor+0x2f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7fe fee8 	bl	80009c0 <__aeabi_fsub>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <MPU_readSensor+0x2f4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7fe ffea 	bl	8000bd4 <__aeabi_fmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <MPU_readSensor+0x2e4>)
 8001c06:	609a      	str	r2, [r3, #8]
	_gyroscope_val[0] = ((float) (tX[0] * _gxcounts + tX[1] * _gycounts + tX[2] * _gzcounts) * _gyroScale) - _gxb;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MPU_readSensor+0x2c0>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	fb03 f202 	mul.w	r2, r3, r2
 8001c16:	2301      	movs	r3, #1
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MPU_readSensor+0x2c4>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	fb03 f301 	mul.w	r3, r3, r1
 8001c24:	441a      	add	r2, r3
 8001c26:	2300      	movs	r3, #0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MPU_readSensor+0x2c8>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	fb03 f301 	mul.w	r3, r3, r1
 8001c34:	4413      	add	r3, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe ff78 	bl	8000b2c <__aeabi_i2f>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <MPU_readSensor+0x2f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7fe ffc5 	bl	8000bd4 <__aeabi_fmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MPU_readSensor+0x2fc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f7fe feb3 	bl	80009c0 <__aeabi_fsub>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <MPU_readSensor+0x300>)
 8001c60:	601a      	str	r2, [r3, #0]
	_gyroscope_val[1] = ((float) (tY[0] * _gxcounts + tY[1] * _gycounts + tY[2] * _gzcounts) * _gyroScale) - _gyb;
 8001c62:	2301      	movs	r3, #1
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MPU_readSensor+0x2c0>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	fb03 f202 	mul.w	r2, r3, r2
 8001c70:	2300      	movs	r3, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	e02c      	b.n	8001cd0 <MPU_readSensor+0x304>
 8001c76:	bf00      	nop
 8001c78:	20000048 	.word	0x20000048
 8001c7c:	2000005e 	.word	0x2000005e
 8001c80:	20000060 	.word	0x20000060
 8001c84:	20000062 	.word	0x20000062
 8001c88:	20000070 	.word	0x20000070
 8001c8c:	20000064 	.word	0x20000064
 8001c90:	20000066 	.word	0x20000066
 8001c94:	20000068 	.word	0x20000068
 8001c98:	2000006a 	.word	0x2000006a
 8001c9c:	2000006c 	.word	0x2000006c
 8001ca0:	2000006e 	.word	0x2000006e
 8001ca4:	20000074 	.word	0x20000074
 8001ca8:	200000b4 	.word	0x200000b4
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	20000120 	.word	0x20000120
 8001cb4:	200000b8 	.word	0x200000b8
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200000bc 	.word	0x200000bc
 8001cc0:	2000000c 	.word	0x2000000c
 8001cc4:	20000078 	.word	0x20000078
 8001cc8:	200000a8 	.word	0x200000a8
 8001ccc:	2000013c 	.word	0x2000013c
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <MPU_readSensor+0x4b0>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	fb03 f301 	mul.w	r3, r3, r1
 8001cda:	441a      	add	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <MPU_readSensor+0x4b4>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	fb03 f301 	mul.w	r3, r3, r1
 8001cea:	4413      	add	r3, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe ff1d 	bl	8000b2c <__aeabi_i2f>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <MPU_readSensor+0x4b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7fe ff6a 	bl	8000bd4 <__aeabi_fmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <MPU_readSensor+0x4bc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7fe fe58 	bl	80009c0 <__aeabi_fsub>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <MPU_readSensor+0x4c0>)
 8001d16:	605a      	str	r2, [r3, #4]
	_gyroscope_val[2] = ((float) (tZ[0] * _gxcounts + tZ[1] * _gycounts + tZ[2] * _gzcounts) * _gyroScale) - _gzb;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <MPU_readSensor+0x4c4>)
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	fb03 f202 	mul.w	r2, r3, r2
 8001d26:	2300      	movs	r3, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <MPU_readSensor+0x4b0>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	fb03 f301 	mul.w	r3, r3, r1
 8001d34:	441a      	add	r2, r3
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <MPU_readSensor+0x4b4>)
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	fb03 f301 	mul.w	r3, r3, r1
 8001d46:	4413      	add	r3, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe feef 	bl	8000b2c <__aeabi_i2f>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <MPU_readSensor+0x4b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f7fe ff3c 	bl	8000bd4 <__aeabi_fmul>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <MPU_readSensor+0x4c8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f7fe fe2a 	bl	80009c0 <__aeabi_fsub>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <MPU_readSensor+0x4c0>)
 8001d72:	609a      	str	r2, [r3, #8]
	_magnetometer_val[0] = (((float) (_hxcounts) * _magScaleX) - _hxb) * _hxs;
 8001d74:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <MPU_readSensor+0x4cc>)
 8001d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fed6 	bl	8000b2c <__aeabi_i2f>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <MPU_readSensor+0x4d0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f7fe ff23 	bl	8000bd4 <__aeabi_fmul>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <MPU_readSensor+0x4d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f7fe fe11 	bl	80009c0 <__aeabi_fsub>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <MPU_readSensor+0x4d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f7fe ff13 	bl	8000bd4 <__aeabi_fmul>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <MPU_readSensor+0x4dc>)
 8001db4:	601a      	str	r2, [r3, #0]
	_magnetometer_val[1] = (((float) (_hycounts) * _magScaleY) - _hyb) * _hys;
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <MPU_readSensor+0x4e0>)
 8001db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe feb5 	bl	8000b2c <__aeabi_i2f>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <MPU_readSensor+0x4e4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f7fe ff02 	bl	8000bd4 <__aeabi_fmul>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <MPU_readSensor+0x4e8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7fe fdf0 	bl	80009c0 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <MPU_readSensor+0x4ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7fe fef2 	bl	8000bd4 <__aeabi_fmul>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <MPU_readSensor+0x4dc>)
 8001df6:	605a      	str	r2, [r3, #4]
	_magnetometer_val[2] = (((float) (_hzcounts) * _magScaleZ) - _hzb) * _hzs;
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <MPU_readSensor+0x4f0>)
 8001dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fe94 	bl	8000b2c <__aeabi_i2f>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <MPU_readSensor+0x4f4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7fe fee1 	bl	8000bd4 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <MPU_readSensor+0x4f8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe fdcf 	bl	80009c0 <__aeabi_fsub>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <MPU_readSensor+0x4fc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f7fe fed1 	bl	8000bd4 <__aeabi_fmul>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MPU_readSensor+0x4dc>)
 8001e38:	609a      	str	r2, [r3, #8]
	_temperature_val = ((((float) _tcounts) - _tempOffset) / _tempScale) + _tempOffset;
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <MPU_readSensor+0x500>)
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fe73 	bl	8000b2c <__aeabi_i2f>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <MPU_readSensor+0x504>)
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7fe fdb7 	bl	80009c0 <__aeabi_fsub>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MPU_readSensor+0x508>)
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f7fe ff6e 	bl	8000d3c <__aeabi_fdiv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MPU_readSensor+0x504>)
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f7fe fdab 	bl	80009c4 <__addsf3>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MPU_readSensor+0x50c>)
 8001e74:	601a      	str	r2, [r3, #0]
	return 1;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000066 	.word	0x20000066
 8001e80:	20000068 	.word	0x20000068
 8001e84:	20000078 	.word	0x20000078
 8001e88:	200000ac 	.word	0x200000ac
 8001e8c:	2000013c 	.word	0x2000013c
 8001e90:	20000064 	.word	0x20000064
 8001e94:	200000b0 	.word	0x200000b0
 8001e98:	2000006a 	.word	0x2000006a
 8001e9c:	2000007c 	.word	0x2000007c
 8001ea0:	200000c0 	.word	0x200000c0
 8001ea4:	20000010 	.word	0x20000010
 8001ea8:	20000130 	.word	0x20000130
 8001eac:	2000006c 	.word	0x2000006c
 8001eb0:	20000080 	.word	0x20000080
 8001eb4:	200000c4 	.word	0x200000c4
 8001eb8:	20000014 	.word	0x20000014
 8001ebc:	2000006e 	.word	0x2000006e
 8001ec0:	20000084 	.word	0x20000084
 8001ec4:	200000c8 	.word	0x200000c8
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	20000070 	.word	0x20000070
 8001ed0:	41a80000 	.word	0x41a80000
 8001ed4:	43a6ef5c 	.word	0x43a6ef5c
 8001ed8:	2000012c 	.word	0x2000012c

08001edc <getGyroX_rads>:
	return _accelerometer_val[2];
}

/* returns the gyroscope measurement in the x direction, rad/s */
float getGyroX_rads()
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return _gyroscope_val[0];
 8001ee0:	4b02      	ldr	r3, [pc, #8]	; (8001eec <getGyroX_rads+0x10>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	2000013c 	.word	0x2000013c

08001ef0 <getGyroY_rads>:

/* returns the gyroscope measurement in the y direction, rad/s */
float getGyroY_rads()
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	return _gyroscope_val[1];
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <getGyroY_rads+0x10>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	2000013c 	.word	0x2000013c

08001f04 <getGyroZ_rads>:

/* returns the gyroscope measurement in the z direction, rad/s */
float getGyroZ_rads()
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return _gyroscope_val[2];
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <getGyroZ_rads+0x10>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	2000013c 	.word	0x2000013c

08001f18 <calibrateGyro>:
	return _temperature_val;
}

/* estimates the gyro biases */
int8_t calibrateGyro()
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	// set the range, bandwidth, and srd
	if (setGyroRange(GYRO_RANGE_250DPS) < 0)
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fbcc 	bl	80016bc <setGyroRange>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da02      	bge.n	8001f30 <calibrateGyro+0x18>
	{
		return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2e:	e0ef      	b.n	8002110 <calibrateGyro+0x1f8>
	}
	if (setDlpfBandwidth(DLPF_BANDWIDTH_20HZ) < 0)
 8001f30:	2003      	movs	r0, #3
 8001f32:	f7ff fc3d 	bl	80017b0 <setDlpfBandwidth>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	da02      	bge.n	8001f42 <calibrateGyro+0x2a>
	{
		return -2;
 8001f3c:	f06f 0301 	mvn.w	r3, #1
 8001f40:	e0e6      	b.n	8002110 <calibrateGyro+0x1f8>
	}
	if (setSrd(19) < 0)
 8001f42:	2013      	movs	r0, #19
 8001f44:	f7ff fcda 	bl	80018fc <setSrd>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da02      	bge.n	8001f54 <calibrateGyro+0x3c>
	{
		return -3;
 8001f4e:	f06f 0302 	mvn.w	r3, #2
 8001f52:	e0dd      	b.n	8002110 <calibrateGyro+0x1f8>
	}

	// take samples and find bias
	_gxbD = 0;
 8001f54:	4a70      	ldr	r2, [pc, #448]	; (8002118 <calibrateGyro+0x200>)
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f04f 0400 	mov.w	r4, #0
 8001f5e:	e9c2 3400 	strd	r3, r4, [r2]
	_gybD = 0;
 8001f62:	4a6e      	ldr	r2, [pc, #440]	; (800211c <calibrateGyro+0x204>)
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f04f 0400 	mov.w	r4, #0
 8001f6c:	e9c2 3400 	strd	r3, r4, [r2]
	_gzbD = 0;
 8001f70:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <calibrateGyro+0x208>)
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	e9c2 3400 	strd	r3, r4, [r2]
	for (size_t i = 0; i < _numSamples; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	e082      	b.n	800208a <calibrateGyro+0x172>
	{
		MPU_readSensor();
 8001f84:	f7ff fd22 	bl	80019cc <MPU_readSensor>
		_gxbD += (getGyroX_rads() + _gxb) / ((double) _numSamples);
 8001f88:	f7ff ffa8 	bl	8001edc <getGyroX_rads>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <calibrateGyro+0x20c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4610      	mov	r0, r2
 8001f96:	f7fe fd15 	bl	80009c4 <__addsf3>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa51 	bl	8000444 <__aeabi_f2d>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <calibrateGyro+0x210>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa28 	bl	8000400 <__aeabi_ui2d>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	f7fe fbc6 	bl	8000748 <__aeabi_ddiv>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	4b54      	ldr	r3, [pc, #336]	; (8002118 <calibrateGyro+0x200>)
 8001fc6:	cb18      	ldmia	r3, {r3, r4}
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	f7fe f8dc 	bl	8000188 <__adddf3>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	4a50      	ldr	r2, [pc, #320]	; (8002118 <calibrateGyro+0x200>)
 8001fd6:	e9c2 3400 	strd	r3, r4, [r2]
		_gybD += (getGyroY_rads() + _gyb) / ((double) _numSamples);
 8001fda:	f7ff ff89 	bl	8001ef0 <getGyroY_rads>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <calibrateGyro+0x214>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f7fe fcec 	bl	80009c4 <__addsf3>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa28 	bl	8000444 <__aeabi_f2d>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460d      	mov	r5, r1
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <calibrateGyro+0x210>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe f9ff 	bl	8000400 <__aeabi_ui2d>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4620      	mov	r0, r4
 8002008:	4629      	mov	r1, r5
 800200a:	f7fe fb9d 	bl	8000748 <__aeabi_ddiv>
 800200e:	4603      	mov	r3, r0
 8002010:	460c      	mov	r4, r1
 8002012:	4618      	mov	r0, r3
 8002014:	4621      	mov	r1, r4
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <calibrateGyro+0x204>)
 8002018:	cb18      	ldmia	r3, {r3, r4}
 800201a:	461a      	mov	r2, r3
 800201c:	4623      	mov	r3, r4
 800201e:	f7fe f8b3 	bl	8000188 <__adddf3>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	4a3d      	ldr	r2, [pc, #244]	; (800211c <calibrateGyro+0x204>)
 8002028:	e9c2 3400 	strd	r3, r4, [r2]
		_gzbD += (getGyroZ_rads() + _gzb) / ((double) _numSamples);
 800202c:	f7ff ff6a 	bl	8001f04 <getGyroZ_rads>
 8002030:	4602      	mov	r2, r0
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <calibrateGyro+0x218>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f7fe fcc3 	bl	80009c4 <__addsf3>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe f9ff 	bl	8000444 <__aeabi_f2d>
 8002046:	4604      	mov	r4, r0
 8002048:	460d      	mov	r5, r1
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <calibrateGyro+0x210>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe f9d6 	bl	8000400 <__aeabi_ui2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe fb74 	bl	8000748 <__aeabi_ddiv>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	4618      	mov	r0, r3
 8002066:	4621      	mov	r1, r4
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <calibrateGyro+0x208>)
 800206a:	cb18      	ldmia	r3, {r3, r4}
 800206c:	461a      	mov	r2, r3
 800206e:	4623      	mov	r3, r4
 8002070:	f7fe f88a 	bl	8000188 <__adddf3>
 8002074:	4603      	mov	r3, r0
 8002076:	460c      	mov	r4, r1
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <calibrateGyro+0x208>)
 800207a:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(20);
 800207e:	2014      	movs	r0, #20
 8002080:	f000 fa98 	bl	80025b4 <HAL_Delay>
	for (size_t i = 0; i < _numSamples; i++)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3301      	adds	r3, #1
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <calibrateGyro+0x210>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	f4ff af77 	bcc.w	8001f84 <calibrateGyro+0x6c>
	}
	_gxb = (float) _gxbD;
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <calibrateGyro+0x200>)
 8002098:	cb18      	ldmia	r3, {r3, r4}
 800209a:	4618      	mov	r0, r3
 800209c:	4621      	mov	r1, r4
 800209e:	f7fe fc3b 	bl	8000918 <__aeabi_d2f>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <calibrateGyro+0x20c>)
 80020a6:	601a      	str	r2, [r3, #0]
	_gyb = (float) _gybD;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <calibrateGyro+0x204>)
 80020aa:	cb18      	ldmia	r3, {r3, r4}
 80020ac:	4618      	mov	r0, r3
 80020ae:	4621      	mov	r1, r4
 80020b0:	f7fe fc32 	bl	8000918 <__aeabi_d2f>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <calibrateGyro+0x214>)
 80020b8:	601a      	str	r2, [r3, #0]
	_gzb = (float) _gzbD;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <calibrateGyro+0x208>)
 80020bc:	cb18      	ldmia	r3, {r3, r4}
 80020be:	4618      	mov	r0, r3
 80020c0:	4621      	mov	r1, r4
 80020c2:	f7fe fc29 	bl	8000918 <__aeabi_d2f>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <calibrateGyro+0x218>)
 80020ca:	601a      	str	r2, [r3, #0]

	// set the range, bandwidth, and srd back to what they were
	if (setGyroRange(_gyroRange) < 0)
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <calibrateGyro+0x21c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff faf3 	bl	80016bc <setGyroRange>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da02      	bge.n	80020e2 <calibrateGyro+0x1ca>
	{
		return -4;
 80020dc:	f06f 0303 	mvn.w	r3, #3
 80020e0:	e016      	b.n	8002110 <calibrateGyro+0x1f8>
	}
	if (setDlpfBandwidth(_bandwidth) < 0)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <calibrateGyro+0x220>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fb62 	bl	80017b0 <setDlpfBandwidth>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da02      	bge.n	80020f8 <calibrateGyro+0x1e0>
	{
		return -5;
 80020f2:	f06f 0304 	mvn.w	r3, #4
 80020f6:	e00b      	b.n	8002110 <calibrateGyro+0x1f8>
	}
	if (setSrd(_srd) < 0)
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <calibrateGyro+0x224>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fbfd 	bl	80018fc <setSrd>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	da02      	bge.n	800210e <calibrateGyro+0x1f6>
	{
		return -6;
 8002108:	f06f 0305 	mvn.w	r3, #5
 800210c:	e000      	b.n	8002110 <calibrateGyro+0x1f8>
	}
	return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bdb0      	pop	{r4, r5, r7, pc}
 8002118:	20000090 	.word	0x20000090
 800211c:	20000098 	.word	0x20000098
 8002120:	200000a0 	.word	0x200000a0
 8002124:	200000a8 	.word	0x200000a8
 8002128:	20000000 	.word	0x20000000
 800212c:	200000ac 	.word	0x200000ac
 8002130:	200000b0 	.word	0x200000b0
 8002134:	20000089 	.word	0x20000089
 8002138:	2000008a 	.word	0x2000008a
 800213c:	2000008b 	.word	0x2000008b

08002140 <MPU_readRegisters>:
	_hzb = bias;
	_hzs = scaleFactor;
}

static int8_t MPU_readRegisters(uint8_t subAddress, uint8_t count, uint8_t *data)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	603a      	str	r2, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	460b      	mov	r3, r1
 800214e:	71bb      	strb	r3, [r7, #6]
	return IIC_ReadRegisters(MPU_ADDRESS, subAddress, count, data);
 8002150:	79ba      	ldrb	r2, [r7, #6]
 8002152:	79f9      	ldrb	r1, [r7, #7]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	20d2      	movs	r0, #210	; 0xd2
 8002158:	f7ff f83e 	bl	80011d8 <IIC_ReadRegisters>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <MPU_writeRegister>:

static int8_t MPU_writeRegister(uint8_t subAddress, uint8_t data)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	460a      	mov	r2, r1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4613      	mov	r3, r2
 8002176:	71bb      	strb	r3, [r7, #6]
	IIC_WriteRegister(MPU_ADDRESS, subAddress, 1, data);
 8002178:	79bb      	ldrb	r3, [r7, #6]
 800217a:	79f9      	ldrb	r1, [r7, #7]
 800217c:	2201      	movs	r2, #1
 800217e:	20d2      	movs	r0, #210	; 0xd2
 8002180:	f7ff f864 	bl	800124c <IIC_WriteRegister>
	HAL_Delay(10);
 8002184:	200a      	movs	r0, #10
 8002186:	f000 fa15 	bl	80025b4 <HAL_Delay>
	// read the register and confirm
	if (MPU_readRegisters(subAddress, 1, _buffer) < 0)
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <MPU_writeRegister+0x54>)
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ffd5 	bl	8002140 <MPU_readRegisters>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	da02      	bge.n	80021a2 <MPU_writeRegister+0x3a>
	{
		return -1;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a0:	e008      	b.n	80021b4 <MPU_writeRegister+0x4c>
	}
	if (_buffer[0] == data)
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MPU_writeRegister+0x54>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	79ba      	ldrb	r2, [r7, #6]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d101      	bne.n	80021b0 <MPU_writeRegister+0x48>
	{
		return 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e001      	b.n	80021b4 <MPU_writeRegister+0x4c>
	}
	return -2;
 80021b0:	f06f 0301 	mvn.w	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000048 	.word	0x20000048

080021c0 <MPU_writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
static int8_t MPU_writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	if (MPU_writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR) < 0)
 80021d0:	210c      	movs	r1, #12
 80021d2:	2025      	movs	r0, #37	; 0x25
 80021d4:	f7ff ffc8 	bl	8002168 <MPU_writeRegister>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da02      	bge.n	80021e4 <MPU_writeAK8963Register+0x24>
	{
		return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e2:	e034      	b.n	800224e <MPU_writeAK8963Register+0x8e>
	}
	// set the register to the desired AK8963 sub address
	if (MPU_writeRegister(I2C_SLV0_REG, subAddress) < 0)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4619      	mov	r1, r3
 80021e8:	2026      	movs	r0, #38	; 0x26
 80021ea:	f7ff ffbd 	bl	8002168 <MPU_writeRegister>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da02      	bge.n	80021fa <MPU_writeAK8963Register+0x3a>
	{
		return -2;
 80021f4:	f06f 0301 	mvn.w	r3, #1
 80021f8:	e029      	b.n	800224e <MPU_writeAK8963Register+0x8e>
	}
	// store the data for write
	if (MPU_writeRegister(I2C_SLV0_DO, data) < 0)
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	4619      	mov	r1, r3
 80021fe:	2063      	movs	r0, #99	; 0x63
 8002200:	f7ff ffb2 	bl	8002168 <MPU_writeRegister>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	da02      	bge.n	8002210 <MPU_writeAK8963Register+0x50>
	{
		return -3;
 800220a:	f06f 0302 	mvn.w	r3, #2
 800220e:	e01e      	b.n	800224e <MPU_writeAK8963Register+0x8e>
	}
	// enable I2C and send 1 byte
	if (MPU_writeRegister(I2C_SLV0_CTRL, I2C_SLV0_EN | (uint8_t) 1) < 0)
 8002210:	2181      	movs	r1, #129	; 0x81
 8002212:	2027      	movs	r0, #39	; 0x27
 8002214:	f7ff ffa8 	bl	8002168 <MPU_writeRegister>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	da02      	bge.n	8002224 <MPU_writeAK8963Register+0x64>
	{
		return -4;
 800221e:	f06f 0303 	mvn.w	r3, #3
 8002222:	e014      	b.n	800224e <MPU_writeAK8963Register+0x8e>
	}
	// read the register and confirm
	if (MPU_readAK8963Registers(subAddress, 1, _buffer) < 0)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <MPU_writeAK8963Register+0x98>)
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f816 	bl	800225c <MPU_readAK8963Registers>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	da02      	bge.n	800223c <MPU_writeAK8963Register+0x7c>
	{
		return -5;
 8002236:	f06f 0304 	mvn.w	r3, #4
 800223a:	e008      	b.n	800224e <MPU_writeAK8963Register+0x8e>
	}
	if (_buffer[0] == data)
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MPU_writeAK8963Register+0x98>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	79ba      	ldrb	r2, [r7, #6]
 8002242:	429a      	cmp	r2, r3
 8002244:	d101      	bne.n	800224a <MPU_writeAK8963Register+0x8a>
	{
		return 1;
 8002246:	2301      	movs	r3, #1
 8002248:	e001      	b.n	800224e <MPU_writeAK8963Register+0x8e>
	}
	else
	{
		return -6;
 800224a:	f06f 0305 	mvn.w	r3, #5
	}
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000048 	.word	0x20000048

0800225c <MPU_readAK8963Registers>:

/* reads registers from the AK8963 */
static int8_t MPU_readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t *dest)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	603a      	str	r2, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	460b      	mov	r3, r1
 800226a:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	if (MPU_writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG) < 0)
 800226c:	218c      	movs	r1, #140	; 0x8c
 800226e:	2025      	movs	r0, #37	; 0x25
 8002270:	f7ff ff7a 	bl	8002168 <MPU_writeRegister>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	da02      	bge.n	8002280 <MPU_readAK8963Registers+0x24>
	{
		return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800227e:	e028      	b.n	80022d2 <MPU_readAK8963Registers+0x76>
	}
	// set the register to the desired AK8963 sub address
	if (MPU_writeRegister(I2C_SLV0_REG, subAddress) < 0)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	4619      	mov	r1, r3
 8002284:	2026      	movs	r0, #38	; 0x26
 8002286:	f7ff ff6f 	bl	8002168 <MPU_writeRegister>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	da02      	bge.n	8002296 <MPU_readAK8963Registers+0x3a>
	{
		return -2;
 8002290:	f06f 0301 	mvn.w	r3, #1
 8002294:	e01d      	b.n	80022d2 <MPU_readAK8963Registers+0x76>
	}
	// enable I2C and request the bytes
	if (MPU_writeRegister(I2C_SLV0_CTRL, I2C_SLV0_EN | count) < 0)
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	2027      	movs	r0, #39	; 0x27
 80022a2:	f7ff ff61 	bl	8002168 <MPU_writeRegister>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <MPU_readAK8963Registers+0x56>
	{
		return -3;
 80022ac:	f06f 0302 	mvn.w	r3, #2
 80022b0:	e00f      	b.n	80022d2 <MPU_readAK8963Registers+0x76>
	}
	HAL_Delay(1); // takes some time for these registers to fill
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 f97e 	bl	80025b4 <HAL_Delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = MPU_readRegisters(EXT_SENS_DATA_00, count, dest);
 80022b8:	79bb      	ldrb	r3, [r7, #6]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	2049      	movs	r0, #73	; 0x49
 80022c0:	f7ff ff3e 	bl	8002140 <MPU_readRegisters>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <MPU_readAK8963Registers+0x80>)
 80022ca:	701a      	strb	r2, [r3, #0]
	return _status;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <MPU_readAK8963Registers+0x80>)
 80022ce:	f993 3000 	ldrsb.w	r3, [r3]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000044 	.word	0x20000044

080022e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022e4:	f000 f8f7 	bl	80024d6 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80022e8:	f7fe ffde 	bl	80012a8 <SystemClock_Config>

	MPU_Init();
 80022ec:	f7ff f82a 	bl	8001344 <MPU_Init>

	while(MPU_whoAmI() != 0x71){
 80022f0:	e000      	b.n	80022f4 <main+0x14>
		__NOP();
 80022f2:	bf00      	nop
	while(MPU_whoAmI() != 0x71){
 80022f4:	f7ff f9ce 	bl	8001694 <MPU_whoAmI>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b71      	cmp	r3, #113	; 0x71
 80022fc:	d1f9      	bne.n	80022f2 <main+0x12>
	}

	/* Infinite loop */
	while (1)
	{
		MPU_readSensor();
 80022fe:	f7ff fb65 	bl	80019cc <MPU_readSensor>
		__NOP();
 8002302:	bf00      	nop
		MPU_readSensor();
 8002304:	e7fb      	b.n	80022fe <main+0x1e>

08002306 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
	...

08002314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_MspInit+0x5c>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_MspInit+0x5c>)
 8002320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002324:	6253      	str	r3, [r2, #36]	; 0x24
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_MspInit+0x5c>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_MspInit+0x5c>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_MspInit+0x5c>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_MspInit+0x5c>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_MspInit+0x5c>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_MspInit+0x5c>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6253      	str	r3, [r2, #36]	; 0x24
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_MspInit+0x5c>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002362:	2007      	movs	r0, #7
 8002364:	f000 fa14 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <HAL_I2C_MspInit+0x8c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d12f      	bne.n	80023f6 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_I2C_MspInit+0x90>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_I2C_MspInit+0x90>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_I2C_MspInit+0x90>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ae:	23c0      	movs	r3, #192	; 0xc0
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b2:	2312      	movs	r3, #18
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023be:	2304      	movs	r3, #4
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	480f      	ldr	r0, [pc, #60]	; (8002408 <HAL_I2C_MspInit+0x94>)
 80023ca:	f000 fa71 	bl	80028b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_I2C_MspInit+0x90>)
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <HAL_I2C_MspInit+0x90>)
 80023d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d8:	6253      	str	r3, [r2, #36]	; 0x24
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_I2C_MspInit+0x90>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	201f      	movs	r0, #31
 80023ec:	f000 f9db 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023f0:	201f      	movs	r0, #31
 80023f2:	f000 f9f4 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	; 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40005400 	.word	0x40005400
 8002404:	40023800 	.word	0x40023800
 8002408:	40020400 	.word	0x40020400

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <HardFault_Handler+0x4>

0800241e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <MemManage_Handler+0x4>

08002424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <BusFault_Handler+0x4>

0800242a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <UsageFault_Handler+0x4>

08002430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 f890 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <I2C1_EV_IRQHandler+0x10>)
 8002466:	f000 fffd 	bl	8003464 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200000cc 	.word	0x200000cc

08002474 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <SystemInit+0x14>)
 800247a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800247e:	609a      	str	r2, [r3, #8]
#endif
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800248c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800248e:	e003      	b.n	8002498 <LoopCopyDataInit>

08002490 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002492:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002494:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002496:	3104      	adds	r1, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002498:	480a      	ldr	r0, [pc, #40]	; (80024c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800249c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800249e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024a0:	d3f6      	bcc.n	8002490 <CopyDataInit>
  ldr r2, =_sbss
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024a4:	e002      	b.n	80024ac <LoopFillZerobss>

080024a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024a8:	f842 3b04 	str.w	r3, [r2], #4

080024ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024b0:	d3f9      	bcc.n	80024a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024b2:	f7ff ffdf 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f003 fbd9 	bl	8005c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ba:	f7ff ff11 	bl	80022e0 <main>
  bx lr
 80024be:	4770      	bx	lr
  ldr r3, =_sidata
 80024c0:	08005d10 	.word	0x08005d10
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024c8:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80024cc:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80024d0:	2000014c 	.word	0x2000014c

080024d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024d4:	e7fe      	b.n	80024d4 <ADC1_IRQHandler>

080024d6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f955 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f80e 	bl	8002508 <HAL_InitTick>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	e001      	b.n	80024fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f8:	f7ff ff0c 	bl	8002314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024fc:	79fb      	ldrb	r3, [r7, #7]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_InitTick+0x68>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_InitTick+0x6c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_InitTick+0x68>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002528:	fbb1 f3f3 	udiv	r3, r1, r3
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f962 	bl	80027fa <HAL_SYSTICK_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	d809      	bhi.n	8002556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002542:	2200      	movs	r2, #0
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	f000 f92c 	bl	80027a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_InitTick+0x70>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e007      	b.n	8002566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e004      	b.n	8002566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000024 	.word	0x20000024
 8002574:	2000001c 	.word	0x2000001c
 8002578:	20000020 	.word	0x20000020

0800257c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_IncTick+0x1c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x20>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4413      	add	r3, r2
 800258a:	4a03      	ldr	r2, [pc, #12]	; (8002598 <HAL_IncTick+0x1c>)
 800258c:	6013      	str	r3, [r2, #0]
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000148 	.word	0x20000148
 800259c:	20000024 	.word	0x20000024

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <HAL_GetTick+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000148 	.word	0x20000148

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025cc:	d004      	beq.n	80025d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_Delay+0x40>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025d8:	bf00      	nop
 80025da:	f7ff ffe1 	bl	80025a0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d8f7      	bhi.n	80025da <HAL_Delay+0x26>
  {
  }
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000024 	.word	0x20000024

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262a:	4a04      	ldr	r2, [pc, #16]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	60d3      	str	r3, [r2, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4906      	ldr	r1, [pc, #24]	; (8002690 <__NVIC_EnableIRQ+0x34>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002770:	f7ff ff90 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff2d 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff42 	bl	8002640 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff90 	bl	80026e8 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5f 	bl	8002694 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff35 	bl	800265c <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d005      	beq.n	8002836 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e029      	b.n	800288a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020e 	bic.w	r2, r2, #14
 8002844:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 021c 	and.w	r2, r3, #28
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
    }
  }
  return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a2:	b2db      	uxtb	r3, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80028c6:	e154      	b.n	8002b72 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8146 	beq.w	8002b6c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00b      	beq.n	8002900 <HAL_GPIO_Init+0x50>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b12      	cmp	r3, #18
 80028fe:	d130      	bne.n	8002962 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002936:	2201      	movs	r2, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0201 	and.w	r2, r3, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0xf2>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b12      	cmp	r3, #18
 80029a0:	d123      	bne.n	80029ea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	6939      	ldr	r1, [r7, #16]
 80029e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0203 	and.w	r2, r3, #3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80a0 	beq.w	8002b6c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2c:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_GPIO_Init+0x2dc>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x2e4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d019      	beq.n	8002aa4 <HAL_GPIO_Init+0x1f4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a49      	ldr	r2, [pc, #292]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_GPIO_Init+0x1f0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_GPIO_Init+0x2ec>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00d      	beq.n	8002a9c <HAL_GPIO_Init+0x1ec>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_GPIO_Init+0x2f0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d007      	beq.n	8002a98 <HAL_GPIO_Init+0x1e8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a46      	ldr	r2, [pc, #280]	; (8002ba4 <HAL_GPIO_Init+0x2f4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_GPIO_Init+0x1e4>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e008      	b.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002a94:	2305      	movs	r3, #5
 8002a96:	e006      	b.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e004      	b.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e002      	b.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	f002 0203 	and.w	r2, r2, #3
 8002aac:	0092      	lsls	r2, r2, #2
 8002aae:	4093      	lsls	r3, r2
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ab6:	4936      	ldr	r1, [pc, #216]	; (8002b90 <HAL_GPIO_Init+0x2e0>)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	3302      	adds	r3, #2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ae8:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b12:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f aea3 	bne.w	80028c8 <HAL_GPIO_Init+0x18>
  }
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e11f      	b.n	8002dfe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fbce 	bl	8002374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c10:	f002 ffb8 	bl	8005b84 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a7b      	ldr	r2, [pc, #492]	; (8002e08 <HAL_I2C_Init+0x25c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d807      	bhi.n	8002c30 <HAL_I2C_Init+0x84>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <HAL_I2C_Init+0x260>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e006      	b.n	8002c3e <HAL_I2C_Init+0x92>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_I2C_Init+0x264>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bf94      	ite	ls
 8002c38:	2301      	movls	r3, #1
 8002c3a:	2300      	movhi	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0db      	b.n	8002dfe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a72      	ldr	r2, [pc, #456]	; (8002e14 <HAL_I2C_Init+0x268>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a64      	ldr	r2, [pc, #400]	; (8002e08 <HAL_I2C_Init+0x25c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <HAL_I2C_Init+0xd4>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e009      	b.n	8002c94 <HAL_I2C_Init+0xe8>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_I2C_Init+0x26c>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	3301      	adds	r3, #1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4956      	ldr	r1, [pc, #344]	; (8002e08 <HAL_I2C_Init+0x25c>)
 8002cb0:	428b      	cmp	r3, r1
 8002cb2:	d80d      	bhi.n	8002cd0 <HAL_I2C_Init+0x124>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e59      	subs	r1, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	bf38      	it	cc
 8002ccc:	2304      	movcc	r3, #4
 8002cce:	e04f      	b.n	8002d70 <HAL_I2C_Init+0x1c4>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_I2C_Init+0x150>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_I2C_Init+0x176>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x17e>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e022      	b.n	8002d70 <HAL_I2C_Init+0x1c4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <HAL_I2C_Init+0x1a4>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e58      	subs	r0, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Init+0x1c4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6809      	ldr	r1, [r1, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6911      	ldr	r1, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	000186a0 	.word	0x000186a0
 8002e0c:	001e847f 	.word	0x001e847f
 8002e10:	003d08ff 	.word	0x003d08ff
 8002e14:	431bde83 	.word	0x431bde83
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fbb6 	bl	80025a0 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80e0 	bne.w	8003004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4970      	ldr	r1, [pc, #448]	; (8003010 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 ff6a 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0d3      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x50>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0cc      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d007      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	893a      	ldrh	r2, [r7, #8]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f001 fd2c 	bl	8004938 <I2C_MasterRequestWrite>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08d      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f00:	e066      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f001 ffe4 	bl	8004ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f001 ffd4 	bl	8004f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01a      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d194      	bne.n	8002f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	00100002 	.word	0x00100002
 8003014:	ffff0000 	.word	0xffff0000

08003018 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	461a      	mov	r2, r3
 8003024:	460b      	mov	r3, r1
 8003026:	817b      	strh	r3, [r7, #10]
 8003028:	4613      	mov	r3, r2
 800302a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff fab8 	bl	80025a0 <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 820b 	bne.w	8003456 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	497c      	ldr	r1, [pc, #496]	; (800323c <HAL_I2C_Master_Receive+0x224>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f001 fe6c 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	e1fe      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_Master_Receive+0x50>
 8003064:	2302      	movs	r3, #2
 8003066:	e1f7      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d007      	beq.n	800308e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2222      	movs	r2, #34	; 0x22
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2210      	movs	r2, #16
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	893a      	ldrh	r2, [r7, #8]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_I2C_Master_Receive+0x228>)
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 fcb0 	bl	8004a3c <I2C_MasterRequestRead>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1b8      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e18c      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11b      	bne.n	8003156 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e16c      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11b      	bne.n	8003196 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	e14c      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031bc:	e138      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	f200 80f1 	bhi.w	80033aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d123      	bne.n	8003218 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f001 feff 	bl	8004fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e139      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003216:	e10b      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b02      	cmp	r3, #2
 800321e:	d14e      	bne.n	80032be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	2200      	movs	r2, #0
 8003228:	4906      	ldr	r1, [pc, #24]	; (8003244 <HAL_I2C_Master_Receive+0x22c>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f001 fd7c 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e10e      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
 800323a:	bf00      	nop
 800323c:	00100002 	.word	0x00100002
 8003240:	ffff0000 	.word	0xffff0000
 8003244:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032bc:	e0b8      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	4966      	ldr	r1, [pc, #408]	; (8003460 <HAL_I2C_Master_Receive+0x448>)
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f001 fd2d 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0bf      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	494f      	ldr	r1, [pc, #316]	; (8003460 <HAL_I2C_Master_Receive+0x448>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f001 fcff 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e091      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033a8:	e042      	b.n	8003430 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f001 fe12 	bl	8004fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e04c      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d118      	bne.n	8003430 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f aec2 	bne.w	80031be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3728      	adds	r7, #40	; 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	00010004 	.word	0x00010004

08003464 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003484:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b10      	cmp	r3, #16
 8003492:	d003      	beq.n	800349c <HAL_I2C_EV_IRQHandler+0x38>
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	f040 80bd 	bne.w	8003616 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034bc:	d003      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x62>
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_EV_IRQHandler+0x66>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_I2C_EV_IRQHandler+0x68>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f000 812e 	beq.w	800372e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x92>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	0a5b      	lsrs	r3, r3, #9
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d006      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f001 fdf9 	bl	80050e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fc82 	bl	8003df8 <I2C_Master_SB>
 80034f4:	e08e      	b.n	8003614 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_I2C_EV_IRQHandler+0xb2>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	0a5b      	lsrs	r3, r3, #9
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fcf7 	bl	8003f02 <I2C_Master_ADD10>
 8003514:	e07e      	b.n	8003614 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0xd2>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fd10 	bl	8003f54 <I2C_Master_ADDR>
 8003534:	e06e      	b.n	8003614 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d037      	beq.n	80035b2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	f000 80ef 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	09db      	lsrs	r3, r3, #7
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00f      	beq.n	8003580 <HAL_I2C_EV_IRQHandler+0x11c>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	0a9b      	lsrs	r3, r3, #10
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <HAL_I2C_EV_IRQHandler+0x11c>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f93e 	bl	80037fa <I2C_MasterTransmit_TXE>
 800357e:	e049      	b.n	8003614 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80d2 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	0a5b      	lsrs	r3, r3, #9
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80cb 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d103      	bne.n	80035aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9c5 	bl	8003932 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a8:	e0c3      	b.n	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa29 	bl	8003a02 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b0:	e0bf      	b.n	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c0:	f000 80b7 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	099b      	lsrs	r3, r3, #6
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00f      	beq.n	80035f0 <HAL_I2C_EV_IRQHandler+0x18c>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	0a9b      	lsrs	r3, r3, #10
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_I2C_EV_IRQHandler+0x18c>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa99 	bl	8003b20 <I2C_MasterReceive_RXNE>
 80035ee:	e011      	b.n	8003614 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 809a 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	0a5b      	lsrs	r3, r3, #9
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8093 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb09 	bl	8003c24 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003612:	e08e      	b.n	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003614:	e08d      	b.n	8003732 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e007      	b.n	8003638 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x206>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	0a5b      	lsrs	r3, r3, #9
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fec2 	bl	80043ec <I2C_Slave_ADDR>
 8003668:	e066      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x226>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	0a5b      	lsrs	r3, r3, #9
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fef6 	bl	8004474 <I2C_Slave_STOPF>
 8003688:	e056      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	2b21      	cmp	r3, #33	; 0x21
 800368e:	d002      	beq.n	8003696 <HAL_I2C_EV_IRQHandler+0x232>
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	2b29      	cmp	r3, #41	; 0x29
 8003694:	d125      	bne.n	80036e2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	09db      	lsrs	r3, r3, #7
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00f      	beq.n	80036c2 <HAL_I2C_EV_IRQHandler+0x25e>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	0a9b      	lsrs	r3, r3, #10
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_I2C_EV_IRQHandler+0x25e>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fdda 	bl	8004274 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c0:	e039      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d033      	beq.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d2>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	0a5b      	lsrs	r3, r3, #9
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02d      	beq.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fe07 	bl	80042ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e0:	e029      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00f      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x2aa>
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	0a9b      	lsrs	r3, r3, #10
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x2aa>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fe11 	bl	800432e <I2C_SlaveReceive_RXNE>
 800370c:	e014      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00e      	beq.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fe3f 	bl	80043aa <I2C_SlaveReceive_BTF>
 800372c:	e004      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003736:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
 8003792:	4613      	mov	r3, r2
 8003794:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003810:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d150      	bne.n	80038c2 <I2C_MasterTransmit_TXE+0xc8>
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b21      	cmp	r3, #33	; 0x21
 8003824:	d14d      	bne.n	80038c2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d01d      	beq.n	8003868 <I2C_MasterTransmit_TXE+0x6e>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b20      	cmp	r3, #32
 8003830:	d01a      	beq.n	8003868 <I2C_MasterTransmit_TXE+0x6e>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003838:	d016      	beq.n	8003868 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003848:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2211      	movs	r2, #17
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff6c 	bl	800373e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003866:	e060      	b.n	800392a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003876:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003886:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d107      	bne.n	80038b2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ff81 	bl	80037b2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b0:	e03b      	b.n	800392a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff3f 	bl	800373e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c0:	e033      	b.n	800392a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b21      	cmp	r3, #33	; 0x21
 80038c6:	d005      	beq.n	80038d4 <I2C_MasterTransmit_TXE+0xda>
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d12d      	bne.n	800392a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	2b22      	cmp	r3, #34	; 0x22
 80038d2:	d12a      	bne.n	800392a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038ee:	e01c      	b.n	800392a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d103      	bne.n	8003904 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f880 	bl	8003a02 <I2C_MemoryTransmit_TXE_BTF>
}
 8003902:	e012      	b.n	800392a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003928:	e7ff      	b.n	800392a <I2C_MasterTransmit_TXE+0x130>
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b21      	cmp	r3, #33	; 0x21
 800394a:	d156      	bne.n	80039fa <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d012      	beq.n	800397c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800397a:	e03e      	b.n	80039fa <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b08      	cmp	r3, #8
 8003980:	d01d      	beq.n	80039be <I2C_MasterTransmit_BTF+0x8c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b20      	cmp	r3, #32
 8003986:	d01a      	beq.n	80039be <I2C_MasterTransmit_BTF+0x8c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800398e:	d016      	beq.n	80039be <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800399e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2211      	movs	r2, #17
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fec1 	bl	800373e <HAL_I2C_MasterTxCpltCallback>
}
 80039bc:	e01d      	b.n	80039fa <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fea2 	bl	800373e <HAL_I2C_MasterTxCpltCallback>
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d10b      	bne.n	8003a3a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a38:	e06e      	b.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	121b      	asrs	r3, r3, #8
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a54:	e060      	b.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10b      	bne.n	8003a76 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a74:	e050      	b.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d14c      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b22      	cmp	r3, #34	; 0x22
 8003a82:	d108      	bne.n	8003a96 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a92:	601a      	str	r2, [r3, #0]
}
 8003a94:	e040      	b.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b21      	cmp	r3, #33	; 0x21
 8003aa4:	d112      	bne.n	8003acc <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003aca:	e025      	b.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d120      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b21      	cmp	r3, #33	; 0x21
 8003ada:	d11d      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fe4d 	bl	80037b2 <HAL_I2C_MemTxCpltCallback>
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b22      	cmp	r3, #34	; 0x22
 8003b32:	d173      	bne.n	8003c1c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d920      	bls.n	8003b84 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d154      	bne.n	8003c1c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b82:	e04b      	b.n	8003c1c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d047      	beq.n	8003c1c <I2C_MasterReceive_RXNE+0xfc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d002      	beq.n	8003b98 <I2C_MasterReceive_RXNE+0x78>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d141      	bne.n	8003c1c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d10a      	bne.n	8003c08 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fddf 	bl	80037c4 <HAL_I2C_MemRxCpltCallback>
}
 8003c06:	e009      	b.n	8003c1c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2212      	movs	r2, #18
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fd9a 	bl	8003750 <HAL_I2C_MasterRxCpltCallback>
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11b      	bne.n	8003c74 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c72:	e0bd      	b.n	8003df0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d129      	bne.n	8003cd2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d00a      	beq.n	8003caa <I2C_MasterReceive_BTF+0x86>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d007      	beq.n	8003caa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cd0:	e08e      	b.n	8003df0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d176      	bne.n	8003dca <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d002      	beq.n	8003ce8 <I2C_MasterReceive_BTF+0xc4>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d108      	bne.n	8003cfa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e019      	b.n	8003d2e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d002      	beq.n	8003d06 <I2C_MasterReceive_BTF+0xe2>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d108      	bne.n	8003d18 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00a      	b.n	8003d2e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d007      	beq.n	8003d2e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d88:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d10a      	bne.n	8003db4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fd09 	bl	80037c4 <HAL_I2C_MemRxCpltCallback>
}
 8003db2:	e01d      	b.n	8003df0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2212      	movs	r2, #18
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fcc4 	bl	8003750 <HAL_I2C_MasterRxCpltCallback>
}
 8003dc8:	e012      	b.n	8003df0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d117      	bne.n	8003e3c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e24:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e26:	e067      	b.n	8003ef8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]
}
 8003e3a:	e05d      	b.n	8003ef8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e44:	d133      	bne.n	8003eae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b21      	cmp	r3, #33	; 0x21
 8003e50:	d109      	bne.n	8003e66 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	e008      	b.n	8003e78 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <I2C_Master_SB+0x92>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d032      	beq.n	8003ef8 <I2C_Master_SB+0x100>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eaa:	605a      	str	r2, [r3, #4]
}
 8003eac:	e024      	b.n	8003ef8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10e      	bne.n	8003ed4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	11db      	asrs	r3, r3, #7
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f003 0306 	and.w	r3, r3, #6
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f063 030f 	orn	r3, r3, #15
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
}
 8003ed2:	e011      	b.n	8003ef8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	11db      	asrs	r3, r3, #7
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0306 	and.w	r3, r3, #6
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f063 030e 	orn	r3, r3, #14
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <I2C_Master_ADD10+0x24>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d011      	beq.n	8003f4a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <I2C_Master_ADD10+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f48:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b091      	sub	sp, #68	; 0x44
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b22      	cmp	r3, #34	; 0x22
 8003f7c:	f040 8169 	bne.w	8004252 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10f      	bne.n	8003fa8 <I2C_Master_ADDR+0x54>
 8003f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d10b      	bne.n	8003fa8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	e160      	b.n	800426a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11d      	bne.n	8003fec <I2C_Master_ADDR+0x98>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fb8:	d118      	bne.n	8003fec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fde:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8003fea:	e13e      	b.n	800426a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d113      	bne.n	800401e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e115      	b.n	800424a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 808a 	bne.w	800413e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004030:	d137      	bne.n	80040a2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004050:	d113      	bne.n	800407a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	e0e7      	b.n	800424a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	623b      	str	r3, [r7, #32]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	e0d3      	b.n	800424a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d02e      	beq.n	8004106 <I2C_Master_ADDR+0x1b2>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d02b      	beq.n	8004106 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	2b12      	cmp	r3, #18
 80040b2:	d102      	bne.n	80040ba <I2C_Master_ADDR+0x166>
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d125      	bne.n	8004106 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d00e      	beq.n	80040de <I2C_Master_ADDR+0x18a>
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d00b      	beq.n	80040de <I2C_Master_ADDR+0x18a>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d008      	beq.n	80040de <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e007      	b.n	80040ee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	e0a1      	b.n	800424a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004114:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e085      	b.n	800424a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d14d      	bne.n	80041e4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	2b04      	cmp	r3, #4
 800414c:	d016      	beq.n	800417c <I2C_Master_ADDR+0x228>
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b02      	cmp	r3, #2
 8004152:	d013      	beq.n	800417c <I2C_Master_ADDR+0x228>
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	2b10      	cmp	r3, #16
 8004158:	d010      	beq.n	800417c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800418a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419a:	d117      	bne.n	80041cc <I2C_Master_ADDR+0x278>
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041a2:	d00b      	beq.n	80041bc <I2C_Master_ADDR+0x268>
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d008      	beq.n	80041bc <I2C_Master_ADDR+0x268>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d005      	beq.n	80041bc <I2C_Master_ADDR+0x268>
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d002      	beq.n	80041bc <I2C_Master_ADDR+0x268>
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d107      	bne.n	80041cc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	e032      	b.n	800424a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004202:	d117      	bne.n	8004234 <I2C_Master_ADDR+0x2e0>
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800420a:	d00b      	beq.n	8004224 <I2C_Master_ADDR+0x2d0>
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	2b01      	cmp	r3, #1
 8004210:	d008      	beq.n	8004224 <I2C_Master_ADDR+0x2d0>
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	2b08      	cmp	r3, #8
 8004216:	d005      	beq.n	8004224 <I2C_Master_ADDR+0x2d0>
 8004218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421a:	2b10      	cmp	r3, #16
 800421c:	d002      	beq.n	8004224 <I2C_Master_ADDR+0x2d0>
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	2b20      	cmp	r3, #32
 8004222:	d107      	bne.n	8004234 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004232:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004250:	e00b      	b.n	800426a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	e7ff      	b.n	800426a <I2C_Master_ADDR+0x316>
 800426a:	bf00      	nop
 800426c:	3744      	adds	r7, #68	; 0x44
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02b      	beq.n	80042e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d114      	bne.n	80042e6 <I2C_SlaveTransmit_TXE+0x72>
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b29      	cmp	r3, #41	; 0x29
 80042c0:	d111      	bne.n	80042e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2228      	movs	r2, #40	; 0x28
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fa3e 	bl	8003762 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02c      	beq.n	80043a2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d114      	bne.n	80043a2 <I2C_SlaveReceive_RXNE+0x74>
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b2a      	cmp	r3, #42	; 0x2a
 800437c:	d111      	bne.n	80043a2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2222      	movs	r2, #34	; 0x22
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2228      	movs	r2, #40	; 0x28
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff f9e9 	bl	8003774 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d012      	beq.n	80043e2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004406:	2b28      	cmp	r3, #40	; 0x28
 8004408:	d127      	bne.n	800445a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004418:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	09db      	lsrs	r3, r3, #7
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	81bb      	strh	r3, [r7, #12]
 800443c:	e002      	b.n	8004444 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800444c:	89ba      	ldrh	r2, [r7, #12]
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff f997 	bl	8003786 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004458:	e008      	b.n	800446c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0202 	mvn.w	r2, #2
 8004462:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004492:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004494:	2300      	movs	r3, #0
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d0:	d172      	bne.n	80045b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b22      	cmp	r3, #34	; 0x22
 80044d6:	d002      	beq.n	80044de <I2C_Slave_STOPF+0x6a>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b2a      	cmp	r3, #42	; 0x2a
 80044dc:	d135      	bne.n	800454a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004510:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe f9bc 	bl	8002894 <HAL_DMA_GetState>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d049      	beq.n	80045b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4a69      	ldr	r2, [pc, #420]	; (80046cc <I2C_Slave_STOPF+0x258>)
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe f96f 	bl	8002812 <HAL_DMA_Abort_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03d      	beq.n	80045b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004544:	4610      	mov	r0, r2
 8004546:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004548:	e035      	b.n	80045b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f043 0204 	orr.w	r2, r3, #4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe f986 	bl	8002894 <HAL_DMA_GetState>
 8004588:	4603      	mov	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	d014      	beq.n	80045b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	4a4e      	ldr	r2, [pc, #312]	; (80046cc <I2C_Slave_STOPF+0x258>)
 8004594:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe f939 	bl	8002812 <HAL_DMA_Abort_IT>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b0:	4610      	mov	r0, r2
 80045b2:	4798      	blx	r3
 80045b4:	e000      	b.n	80045b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d03e      	beq.n	8004640 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d112      	bne.n	80045f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d112      	bne.n	800462a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0204 	orr.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f843 	bl	80046d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800464e:	e039      	b.n	80046c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b2a      	cmp	r3, #42	; 0x2a
 8004654:	d109      	bne.n	800466a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2228      	movs	r2, #40	; 0x28
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff f885 	bl	8003774 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b28      	cmp	r3, #40	; 0x28
 8004674:	d111      	bne.n	800469a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <I2C_Slave_STOPF+0x25c>)
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff f884 	bl	80037a0 <HAL_I2C_ListenCpltCallback>
}
 8004698:	e014      	b.n	80046c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	2b22      	cmp	r3, #34	; 0x22
 80046a0:	d002      	beq.n	80046a8 <I2C_Slave_STOPF+0x234>
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b22      	cmp	r3, #34	; 0x22
 80046a6:	d10d      	bne.n	80046c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff f858 	bl	8003774 <HAL_I2C_SlaveRxCpltCallback>
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08004bd9 	.word	0x08004bd9
 80046d0:	ffff0000 	.word	0xffff0000

080046d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d002      	beq.n	80046f8 <I2C_ITError+0x24>
 80046f2:	7bbb      	ldrb	r3, [r7, #14]
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d10a      	bne.n	800470e <I2C_ITError+0x3a>
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b22      	cmp	r3, #34	; 0x22
 80046fc:	d107      	bne.n	800470e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800470c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004714:	2b28      	cmp	r3, #40	; 0x28
 8004716:	d107      	bne.n	8004728 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2228      	movs	r2, #40	; 0x28
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004726:	e015      	b.n	8004754 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d00a      	beq.n	800474e <I2C_ITError+0x7a>
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b60      	cmp	r3, #96	; 0x60
 800473c:	d007      	beq.n	800474e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004762:	d162      	bne.n	800482a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004772:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d020      	beq.n	80047c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004786:	4a6a      	ldr	r2, [pc, #424]	; (8004930 <I2C_ITError+0x25c>)
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe f83f 	bl	8002812 <HAL_DMA_Abort_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8089 	beq.w	80048ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047be:	4610      	mov	r0, r2
 80047c0:	4798      	blx	r3
 80047c2:	e074      	b.n	80048ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	4a59      	ldr	r2, [pc, #356]	; (8004930 <I2C_ITError+0x25c>)
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fe f81e 	bl	8002812 <HAL_DMA_Abort_IT>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d068      	beq.n	80048ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d10b      	bne.n	8004802 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004824:	4610      	mov	r0, r2
 8004826:	4798      	blx	r3
 8004828:	e041      	b.n	80048ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b60      	cmp	r3, #96	; 0x60
 8004834:	d125      	bne.n	8004882 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d10b      	bne.n	800486a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe ffb4 	bl	80037e8 <HAL_I2C_AbortCpltCallback>
 8004880:	e015      	b.n	80048ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d10b      	bne.n	80048a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fe ff94 	bl	80037d6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10e      	bne.n	80048dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d113      	bne.n	8004928 <I2C_ITError+0x254>
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b28      	cmp	r3, #40	; 0x28
 8004904:	d110      	bne.n	8004928 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <I2C_ITError+0x260>)
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe ff3c 	bl	80037a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	08004bd9 	.word	0x08004bd9
 8004934:	ffff0000 	.word	0xffff0000

08004938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	460b      	mov	r3, r1
 8004946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d006      	beq.n	8004962 <I2C_MasterRequestWrite+0x2a>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d003      	beq.n	8004962 <I2C_MasterRequestWrite+0x2a>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004960:	d108      	bne.n	8004974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e00b      	b.n	800498c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2b12      	cmp	r3, #18
 800497a:	d107      	bne.n	800498c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f9c5 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b2:	d103      	bne.n	80049bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e035      	b.n	8004a2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c8:	d108      	bne.n	80049dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	e01b      	b.n	8004a14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049dc:	897b      	ldrh	r3, [r7, #10]
 80049de:	11db      	asrs	r3, r3, #7
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0306 	and.w	r3, r3, #6
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f063 030f 	orn	r3, r3, #15
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	490e      	ldr	r1, [pc, #56]	; (8004a34 <I2C_MasterRequestWrite+0xfc>)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f9eb 	bl	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e010      	b.n	8004a2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4907      	ldr	r1, [pc, #28]	; (8004a38 <I2C_MasterRequestWrite+0x100>)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f9db 	bl	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	00010008 	.word	0x00010008
 8004a38:	00010002 	.word	0x00010002

08004a3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d006      	beq.n	8004a76 <I2C_MasterRequestRead+0x3a>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d003      	beq.n	8004a76 <I2C_MasterRequestRead+0x3a>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a74:	d108      	bne.n	8004a88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e00b      	b.n	8004aa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	2b11      	cmp	r3, #17
 8004a8e:	d107      	bne.n	8004aa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f93b 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00d      	beq.n	8004ad4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac6:	d103      	bne.n	8004ad0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e079      	b.n	8004bc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004adc:	d108      	bne.n	8004af0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ade:	897b      	ldrh	r3, [r7, #10]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	611a      	str	r2, [r3, #16]
 8004aee:	e05f      	b.n	8004bb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004af0:	897b      	ldrh	r3, [r7, #10]
 8004af2:	11db      	asrs	r3, r3, #7
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f003 0306 	and.w	r3, r3, #6
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f063 030f 	orn	r3, r3, #15
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4930      	ldr	r1, [pc, #192]	; (8004bd0 <I2C_MasterRequestRead+0x194>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f961 	bl	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e054      	b.n	8004bc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b1e:	897b      	ldrh	r3, [r7, #10]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4929      	ldr	r1, [pc, #164]	; (8004bd4 <I2C_MasterRequestRead+0x198>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f951 	bl	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e044      	b.n	8004bc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f8d9 	bl	8004d28 <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8a:	d103      	bne.n	8004b94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e017      	b.n	8004bc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	11db      	asrs	r3, r3, #7
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0306 	and.w	r3, r3, #6
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f063 030e 	orn	r3, r3, #14
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4907      	ldr	r1, [pc, #28]	; (8004bd4 <I2C_MasterRequestRead+0x198>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f90d 	bl	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	00010008 	.word	0x00010008
 8004bd4:	00010002 	.word	0x00010002

08004bd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bf2:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <I2C_DMAAbort+0x148>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	4a4a      	ldr	r2, [pc, #296]	; (8004d24 <I2C_DMAAbort+0x14c>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a1a      	lsrs	r2, r3, #8
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00da      	lsls	r2, r3, #3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c1e:	e00a      	b.n	8004c36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c34:	d0ea      	beq.n	8004c0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	2200      	movs	r2, #0
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	2200      	movs	r2, #0
 8004c7a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	2200      	movs	r2, #0
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d10e      	bne.n	8004cc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7fe fd92 	bl	80037e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cc4:	e027      	b.n	8004d16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ccc:	2b28      	cmp	r3, #40	; 0x28
 8004cce:	d117      	bne.n	8004d00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2228      	movs	r2, #40	; 0x28
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cfe:	e007      	b.n	8004d10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d10:	6978      	ldr	r0, [r7, #20]
 8004d12:	f7fe fd60 	bl	80037d6 <HAL_I2C_ErrorCallback>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2000001c 	.word	0x2000001c
 8004d24:	14f8b589 	.word	0x14f8b589

08004d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d38:	e025      	b.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d40:	d021      	beq.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fd fc2d 	bl	80025a0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d116      	bne.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e023      	b.n	8004dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10d      	bne.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	e00c      	b.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d0b6      	beq.n	8004d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de4:	e051      	b.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df4:	d123      	bne.n	8004e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e046      	b.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e44:	d021      	beq.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fd fbab 	bl	80025a0 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e020      	b.n	8004ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10c      	bne.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e00b      	b.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d18d      	bne.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee0:	e02d      	b.n	8004f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f8ce 	bl	8005084 <I2C_IsAcknowledgeFailed>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e02d      	b.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ef8:	d021      	beq.n	8004f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efa:	f7fd fb51 	bl	80025a0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d302      	bcc.n	8004f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d116      	bne.n	8004f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e007      	b.n	8004f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d1ca      	bne.n	8004ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f62:	e02d      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f88d 	bl	8005084 <I2C_IsAcknowledgeFailed>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e02d      	b.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7a:	d021      	beq.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7c:	f7fd fb10 	bl	80025a0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e007      	b.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d1ca      	bne.n	8004f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe4:	e042      	b.n	800506c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d119      	bne.n	8005028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0210 	mvn.w	r2, #16
 8004ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e029      	b.n	800507c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005028:	f7fd faba 	bl	80025a0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d116      	bne.n	800506c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e007      	b.n	800507c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d1b5      	bne.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509a:	d11b      	bne.n	80050d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	f043 0204 	orr.w	r2, r3, #4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050f0:	d103      	bne.n	80050fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050f8:	e007      	b.n	800510a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005102:	d102      	bne.n	800510a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2208      	movs	r2, #8
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e31d      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005126:	4b94      	ldr	r3, [pc, #592]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005130:	4b91      	ldr	r3, [pc, #580]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005138:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d07b      	beq.n	800523e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d006      	beq.n	800515a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d10f      	bne.n	8005172 <HAL_RCC_OscConfig+0x5e>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d10b      	bne.n	8005172 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515a:	4b87      	ldr	r3, [pc, #540]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d06a      	beq.n	800523c <HAL_RCC_OscConfig+0x128>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d166      	bne.n	800523c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e2f7      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x74>
 800517a:	4b7f      	ldr	r3, [pc, #508]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7e      	ldr	r2, [pc, #504]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e02d      	b.n	80051e4 <HAL_RCC_OscConfig+0xd0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10c      	bne.n	80051aa <HAL_RCC_OscConfig+0x96>
 8005190:	4b79      	ldr	r3, [pc, #484]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a78      	ldr	r2, [pc, #480]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b76      	ldr	r3, [pc, #472]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a75      	ldr	r2, [pc, #468]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e01c      	b.n	80051e4 <HAL_RCC_OscConfig+0xd0>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0xb8>
 80051b2:	4b71      	ldr	r3, [pc, #452]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a70      	ldr	r2, [pc, #448]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b6e      	ldr	r3, [pc, #440]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6d      	ldr	r2, [pc, #436]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0xd0>
 80051cc:	4b6a      	ldr	r3, [pc, #424]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a69      	ldr	r2, [pc, #420]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	4b67      	ldr	r3, [pc, #412]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a66      	ldr	r2, [pc, #408]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80051de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d013      	beq.n	8005214 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7fd f9d8 	bl	80025a0 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051f4:	f7fd f9d4 	bl	80025a0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	; 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e2ad      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005206:	4b5c      	ldr	r3, [pc, #368]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0xe0>
 8005212:	e014      	b.n	800523e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd f9c4 	bl	80025a0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800521c:	f7fd f9c0 	bl	80025a0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	; 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e299      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800522e:	4b52      	ldr	r3, [pc, #328]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x108>
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d05a      	beq.n	8005300 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d005      	beq.n	800525c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d119      	bne.n	800528a <HAL_RCC_OscConfig+0x176>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d116      	bne.n	800528a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525c:	4b46      	ldr	r3, [pc, #280]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_OscConfig+0x160>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d001      	beq.n	8005274 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e276      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005274:	4b40      	ldr	r3, [pc, #256]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	493d      	ldr	r1, [pc, #244]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005288:	e03a      	b.n	8005300 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_RCC_OscConfig+0x268>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fd f982 	bl	80025a0 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fd f97e 	bl	80025a0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e257      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	492a      	ldr	r1, [pc, #168]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
 80052d2:	e015      	b.n	8005300 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d4:	4b29      	ldr	r3, [pc, #164]	; (800537c <HAL_RCC_OscConfig+0x268>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052da:	f7fd f961 	bl	80025a0 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052e2:	f7fd f95d 	bl	80025a0 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e236      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80b8 	beq.w	800547e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d170      	bne.n	80053f6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x218>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e21a      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005338:	429a      	cmp	r2, r3
 800533a:	d921      	bls.n	8005380 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fc33 	bl	8005bac <RCC_SetFlashLatencyFromMSIRange>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e208      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4906      	ldr	r1, [pc, #24]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	4901      	ldr	r1, [pc, #4]	; (8005378 <HAL_RCC_OscConfig+0x264>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
 8005376:	e020      	b.n	80053ba <HAL_RCC_OscConfig+0x2a6>
 8005378:	40023800 	.word	0x40023800
 800537c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005380:	4ba4      	ldr	r3, [pc, #656]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	49a1      	ldr	r1, [pc, #644]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005392:	4ba0      	ldr	r3, [pc, #640]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	061b      	lsls	r3, r3, #24
 80053a0:	499c      	ldr	r1, [pc, #624]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fbfe 	bl	8005bac <RCC_SetFlashLatencyFromMSIRange>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e1d3      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	0b5b      	lsrs	r3, r3, #13
 80053c0:	3301      	adds	r3, #1
 80053c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80053ca:	4a92      	ldr	r2, [pc, #584]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	0912      	lsrs	r2, r2, #4
 80053d0:	f002 020f 	and.w	r2, r2, #15
 80053d4:	4990      	ldr	r1, [pc, #576]	; (8005618 <HAL_RCC_OscConfig+0x504>)
 80053d6:	5c8a      	ldrb	r2, [r1, r2]
 80053d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80053da:	4a90      	ldr	r2, [pc, #576]	; (800561c <HAL_RCC_OscConfig+0x508>)
 80053dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053de:	4b90      	ldr	r3, [pc, #576]	; (8005620 <HAL_RCC_OscConfig+0x50c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fd f890 	bl	8002508 <HAL_InitTick>
 80053e8:	4603      	mov	r3, r0
 80053ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d045      	beq.n	800547e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	e1b5      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d029      	beq.n	8005452 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053fe:	4b89      	ldr	r3, [pc, #548]	; (8005624 <HAL_RCC_OscConfig+0x510>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fd f8cc 	bl	80025a0 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800540c:	f7fd f8c8 	bl	80025a0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1a1      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800541e:	4b7d      	ldr	r3, [pc, #500]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800542a:	4b7a      	ldr	r3, [pc, #488]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4977      	ldr	r1, [pc, #476]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005438:	4313      	orrs	r3, r2
 800543a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543c:	4b75      	ldr	r3, [pc, #468]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	061b      	lsls	r3, r3, #24
 800544a:	4972      	ldr	r1, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]
 8005450:	e015      	b.n	800547e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005452:	4b74      	ldr	r3, [pc, #464]	; (8005624 <HAL_RCC_OscConfig+0x510>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fd f8a2 	bl	80025a0 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005460:	f7fd f89e 	bl	80025a0 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e177      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005472:	4b68      	ldr	r3, [pc, #416]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d030      	beq.n	80054ec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005492:	4b65      	ldr	r3, [pc, #404]	; (8005628 <HAL_RCC_OscConfig+0x514>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fd f882 	bl	80025a0 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a0:	f7fd f87e 	bl	80025a0 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e157      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054b2:	4b58      	ldr	r3, [pc, #352]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x38c>
 80054be:	e015      	b.n	80054ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c0:	4b59      	ldr	r3, [pc, #356]	; (8005628 <HAL_RCC_OscConfig+0x514>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c6:	f7fd f86b 	bl	80025a0 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ce:	f7fd f867 	bl	80025a0 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e140      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054e0:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80b5 	beq.w	8005664 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fe:	4b45      	ldr	r3, [pc, #276]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	4a41      	ldr	r2, [pc, #260]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6253      	str	r3, [r2, #36]	; 0x24
 8005516:	4b3f      	ldr	r3, [pc, #252]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005526:	4b41      	ldr	r3, [pc, #260]	; (800562c <HAL_RCC_OscConfig+0x518>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005532:	4b3e      	ldr	r3, [pc, #248]	; (800562c <HAL_RCC_OscConfig+0x518>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3d      	ldr	r2, [pc, #244]	; (800562c <HAL_RCC_OscConfig+0x518>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7fd f82f 	bl	80025a0 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fd f82b 	bl	80025a0 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b64      	cmp	r3, #100	; 0x64
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e104      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	4b34      	ldr	r3, [pc, #208]	; (800562c <HAL_RCC_OscConfig+0x518>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d106      	bne.n	800557a <HAL_RCC_OscConfig+0x466>
 800556c:	4b29      	ldr	r3, [pc, #164]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 800556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005570:	4a28      	ldr	r2, [pc, #160]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	6353      	str	r3, [r2, #52]	; 0x34
 8005578:	e02d      	b.n	80055d6 <HAL_RCC_OscConfig+0x4c2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x488>
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005586:	4a23      	ldr	r2, [pc, #140]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800558c:	6353      	str	r3, [r2, #52]	; 0x34
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	4a20      	ldr	r2, [pc, #128]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	6353      	str	r3, [r2, #52]	; 0x34
 800559a:	e01c      	b.n	80055d6 <HAL_RCC_OscConfig+0x4c2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	d10c      	bne.n	80055be <HAL_RCC_OscConfig+0x4aa>
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055ae:	6353      	str	r3, [r2, #52]	; 0x34
 80055b0:	4b18      	ldr	r3, [pc, #96]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ba:	6353      	str	r3, [r2, #52]	; 0x34
 80055bc:	e00b      	b.n	80055d6 <HAL_RCC_OscConfig+0x4c2>
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c8:	6353      	str	r3, [r2, #52]	; 0x34
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	4a11      	ldr	r2, [pc, #68]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d015      	beq.n	800560a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055de:	f7fc ffdf 	bl	80025a0 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055e4:	e00a      	b.n	80055fc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f7fc ffdb 	bl	80025a0 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e0b2      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCC_OscConfig+0x500>)
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ee      	beq.n	80055e6 <HAL_RCC_OscConfig+0x4d2>
 8005608:	e023      	b.n	8005652 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560a:	f7fc ffc9 	bl	80025a0 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005610:	e019      	b.n	8005646 <HAL_RCC_OscConfig+0x532>
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	08005ce8 	.word	0x08005ce8
 800561c:	2000001c 	.word	0x2000001c
 8005620:	20000020 	.word	0x20000020
 8005624:	42470020 	.word	0x42470020
 8005628:	42470680 	.word	0x42470680
 800562c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7fc ffb6 	bl	80025a0 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	; 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e08d      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005646:	4b49      	ldr	r3, [pc, #292]	; (800576c <HAL_RCC_OscConfig+0x658>)
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ee      	bne.n	8005630 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005652:	7ffb      	ldrb	r3, [r7, #31]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d105      	bne.n	8005664 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005658:	4b44      	ldr	r3, [pc, #272]	; (800576c <HAL_RCC_OscConfig+0x658>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	4a43      	ldr	r2, [pc, #268]	; (800576c <HAL_RCC_OscConfig+0x658>)
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005662:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d079      	beq.n	8005760 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d056      	beq.n	8005720 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b02      	cmp	r3, #2
 8005678:	d13b      	bne.n	80056f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_RCC_OscConfig+0x65c>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fc ff8e 	bl	80025a0 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc ff8a 	bl	80025a0 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e063      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_OscConfig+0x658>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a6:	4b31      	ldr	r3, [pc, #196]	; (800576c <HAL_RCC_OscConfig+0x658>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	4319      	orrs	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	430b      	orrs	r3, r1
 80056be:	492b      	ldr	r1, [pc, #172]	; (800576c <HAL_RCC_OscConfig+0x658>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c4:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <HAL_RCC_OscConfig+0x65c>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fc ff69 	bl	80025a0 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fc ff65 	bl	80025a0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e03e      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_OscConfig+0x658>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x5be>
 80056f0:	e036      	b.n	8005760 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <HAL_RCC_OscConfig+0x65c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fc ff52 	bl	80025a0 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fc ff4e 	bl	80025a0 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e027      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <HAL_RCC_OscConfig+0x658>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x5ec>
 800571e:	e01f      	b.n	8005760 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e01a      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <HAL_RCC_OscConfig+0x658>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	429a      	cmp	r2, r3
 800573e:	d10d      	bne.n	800575c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574a:	429a      	cmp	r2, r3
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800
 8005770:	42470060 	.word	0x42470060

08005774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e11a      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	4b8f      	ldr	r3, [pc, #572]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d919      	bls.n	80057ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x34>
 800579c:	4b8a      	ldr	r3, [pc, #552]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a89      	ldr	r2, [pc, #548]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 80057a2:	f043 0304 	orr.w	r3, r3, #4
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b87      	ldr	r3, [pc, #540]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f023 0201 	bic.w	r2, r3, #1
 80057b0:	4985      	ldr	r1, [pc, #532]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b8:	4b83      	ldr	r3, [pc, #524]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d001      	beq.n	80057ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e0f9      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d6:	4b7d      	ldr	r3, [pc, #500]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	497a      	ldr	r1, [pc, #488]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 808e 	beq.w	8005912 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057fe:	4b73      	ldr	r3, [pc, #460]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d121      	bne.n	800584e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e0d7      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005816:	4b6d      	ldr	r3, [pc, #436]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d115      	bne.n	800584e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0cb      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800582e:	4b67      	ldr	r3, [pc, #412]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0bf      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800583e:	4b63      	ldr	r3, [pc, #396]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0b7      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584e:	4b5f      	ldr	r3, [pc, #380]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	495c      	ldr	r1, [pc, #368]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005860:	f7fc fe9e 	bl	80025a0 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d112      	bne.n	8005894 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800586e:	e00a      	b.n	8005886 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005870:	f7fc fe96 	bl	80025a0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	; 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e09b      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005886:	4b51      	ldr	r3, [pc, #324]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b08      	cmp	r3, #8
 8005890:	d1ee      	bne.n	8005870 <HAL_RCC_ClockConfig+0xfc>
 8005892:	e03e      	b.n	8005912 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d112      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589e:	f7fc fe7f 	bl	80025a0 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e084      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b4:	4b45      	ldr	r3, [pc, #276]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d1ee      	bne.n	800589e <HAL_RCC_ClockConfig+0x12a>
 80058c0:	e027      	b.n	8005912 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d11d      	bne.n	8005906 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058cc:	f7fc fe68 	bl	80025a0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e06d      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058e2:	4b3a      	ldr	r3, [pc, #232]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d1ee      	bne.n	80058cc <HAL_RCC_ClockConfig+0x158>
 80058ee:	e010      	b.n	8005912 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f0:	f7fc fe56 	bl	80025a0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e05b      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005906:	4b31      	ldr	r3, [pc, #196]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1ee      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005912:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d219      	bcs.n	8005954 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d105      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1be>
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 800592c:	f043 0304 	orr.w	r3, r3, #4
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	4923      	ldr	r1, [pc, #140]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <HAL_RCC_ClockConfig+0x254>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e034      	b.n	80059be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005960:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4917      	ldr	r1, [pc, #92]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	490f      	ldr	r1, [pc, #60]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005992:	f000 f823 	bl	80059dc <HAL_RCC_GetSysClockFreq>
 8005996:	4601      	mov	r1, r0
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <HAL_RCC_ClockConfig+0x258>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	4a0b      	ldr	r2, [pc, #44]	; (80059d0 <HAL_RCC_ClockConfig+0x25c>)
 80059a4:	5cd3      	ldrb	r3, [r2, r3]
 80059a6:	fa21 f303 	lsr.w	r3, r1, r3
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <HAL_RCC_ClockConfig+0x260>)
 80059ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_RCC_ClockConfig+0x264>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fc fda8 	bl	8002508 <HAL_InitTick>
 80059b8:	4603      	mov	r3, r0
 80059ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80059bc:	7afb      	ldrb	r3, [r7, #11]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00
 80059cc:	40023800 	.word	0x40023800
 80059d0:	08005ce8 	.word	0x08005ce8
 80059d4:	2000001c 	.word	0x2000001c
 80059d8:	20000020 	.word	0x20000020

080059dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80059e2:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x184>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d007      	beq.n	8005a02 <HAL_RCC_GetSysClockFreq+0x26>
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d008      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0x2c>
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	f040 809f 	bne.w	8005b3a <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b59      	ldr	r3, [pc, #356]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x188>)
 80059fe:	613b      	str	r3, [r7, #16]
      break;
 8005a00:	e0a9      	b.n	8005b56 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a02:	4b59      	ldr	r3, [pc, #356]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005a04:	613b      	str	r3, [r7, #16]
      break;
 8005a06:	e0a6      	b.n	8005b56 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	0c9b      	lsrs	r3, r3, #18
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4a56      	ldr	r2, [pc, #344]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x190>)
 8005a12:	5cd3      	ldrb	r3, [r2, r3]
 8005a14:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	0d9b      	lsrs	r3, r3, #22
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a22:	4b4f      	ldr	r3, [pc, #316]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d041      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	461d      	mov	r5, r3
 8005a32:	f04f 0600 	mov.w	r6, #0
 8005a36:	4629      	mov	r1, r5
 8005a38:	4632      	mov	r2, r6
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	f04f 0400 	mov.w	r4, #0
 8005a42:	0154      	lsls	r4, r2, #5
 8005a44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a48:	014b      	lsls	r3, r1, #5
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	1b49      	subs	r1, r1, r5
 8005a50:	eb62 0206 	sbc.w	r2, r2, r6
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	0194      	lsls	r4, r2, #6
 8005a5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a62:	018b      	lsls	r3, r1, #6
 8005a64:	1a5b      	subs	r3, r3, r1
 8005a66:	eb64 0402 	sbc.w	r4, r4, r2
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	00e2      	lsls	r2, r4, #3
 8005a74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a78:	00d9      	lsls	r1, r3, #3
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	195b      	adds	r3, r3, r5
 8005a80:	eb44 0406 	adc.w	r4, r4, r6
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	0262      	lsls	r2, r4, #9
 8005a8e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a92:	0259      	lsls	r1, r3, #9
 8005a94:	460b      	mov	r3, r1
 8005a96:	4614      	mov	r4, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f04f 0400 	mov.w	r4, #0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	f7fb f9e5 	bl	8000e74 <__aeabi_uldivmod>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e040      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	461d      	mov	r5, r3
 8005ab6:	f04f 0600 	mov.w	r6, #0
 8005aba:	4629      	mov	r1, r5
 8005abc:	4632      	mov	r2, r6
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	f04f 0400 	mov.w	r4, #0
 8005ac6:	0154      	lsls	r4, r2, #5
 8005ac8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005acc:	014b      	lsls	r3, r1, #5
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	1b49      	subs	r1, r1, r5
 8005ad4:	eb62 0206 	sbc.w	r2, r2, r6
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	0194      	lsls	r4, r2, #6
 8005ae2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ae6:	018b      	lsls	r3, r1, #6
 8005ae8:	1a5b      	subs	r3, r3, r1
 8005aea:	eb64 0402 	sbc.w	r4, r4, r2
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005afc:	00d9      	lsls	r1, r3, #3
 8005afe:	460b      	mov	r3, r1
 8005b00:	4614      	mov	r4, r2
 8005b02:	195b      	adds	r3, r3, r5
 8005b04:	eb44 0406 	adc.w	r4, r4, r6
 8005b08:	f04f 0100 	mov.w	r1, #0
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	02a2      	lsls	r2, r4, #10
 8005b12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b16:	0299      	lsls	r1, r3, #10
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4614      	mov	r4, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4621      	mov	r1, r4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f04f 0400 	mov.w	r4, #0
 8005b26:	461a      	mov	r2, r3
 8005b28:	4623      	mov	r3, r4
 8005b2a:	f7fb f9a3 	bl	8000e74 <__aeabi_uldivmod>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	613b      	str	r3, [r7, #16]
      break;
 8005b38:	e00d      	b.n	8005b56 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	0b5b      	lsrs	r3, r3, #13
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	613b      	str	r3, [r7, #16]
      break;
 8005b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b56:	693b      	ldr	r3, [r7, #16]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	00f42400 	.word	0x00f42400
 8005b68:	007a1200 	.word	0x007a1200
 8005b6c:	08005cdc 	.word	0x08005cdc

08005b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b76:	681b      	ldr	r3, [r3, #0]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	2000001c 	.word	0x2000001c

08005b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b88:	f7ff fff2 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	4a03      	ldr	r2, [pc, #12]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	08005cf8 	.word	0x08005cf8

08005bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005bb8:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d12c      	bne.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bc4:	4b26      	ldr	r3, [pc, #152]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005bd0:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e016      	b.n	8005c0a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bdc:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be6:	6253      	str	r3, [r2, #36]	; 0x24
 8005be8:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005bfc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfe:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c10:	d105      	bne.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c18:	d101      	bne.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d105      	bne.n	8005c30 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a0f      	ldr	r2, [pc, #60]	; (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c2a:	f043 0304 	orr.w	r3, r3, #4
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f023 0201 	bic.w	r2, r3, #1
 8005c38:	490b      	ldr	r1, [pc, #44]	; (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d001      	beq.n	8005c52 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40007000 	.word	0x40007000
 8005c68:	40023c00 	.word	0x40023c00

08005c6c <__libc_init_array>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	2500      	movs	r5, #0
 8005c70:	4e0c      	ldr	r6, [pc, #48]	; (8005ca4 <__libc_init_array+0x38>)
 8005c72:	4c0d      	ldr	r4, [pc, #52]	; (8005ca8 <__libc_init_array+0x3c>)
 8005c74:	1ba4      	subs	r4, r4, r6
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	42a5      	cmp	r5, r4
 8005c7a:	d109      	bne.n	8005c90 <__libc_init_array+0x24>
 8005c7c:	f000 f822 	bl	8005cc4 <_init>
 8005c80:	2500      	movs	r5, #0
 8005c82:	4e0a      	ldr	r6, [pc, #40]	; (8005cac <__libc_init_array+0x40>)
 8005c84:	4c0a      	ldr	r4, [pc, #40]	; (8005cb0 <__libc_init_array+0x44>)
 8005c86:	1ba4      	subs	r4, r4, r6
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	42a5      	cmp	r5, r4
 8005c8c:	d105      	bne.n	8005c9a <__libc_init_array+0x2e>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c94:	4798      	blx	r3
 8005c96:	3501      	adds	r5, #1
 8005c98:	e7ee      	b.n	8005c78 <__libc_init_array+0xc>
 8005c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c9e:	4798      	blx	r3
 8005ca0:	3501      	adds	r5, #1
 8005ca2:	e7f2      	b.n	8005c8a <__libc_init_array+0x1e>
 8005ca4:	08005d08 	.word	0x08005d08
 8005ca8:	08005d08 	.word	0x08005d08
 8005cac:	08005d08 	.word	0x08005d08
 8005cb0:	08005d0c 	.word	0x08005d0c

08005cb4 <memset>:
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4402      	add	r2, r0
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d100      	bne.n	8005cbe <memset+0xa>
 8005cbc:	4770      	bx	lr
 8005cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc2:	e7f9      	b.n	8005cb8 <memset+0x4>

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
